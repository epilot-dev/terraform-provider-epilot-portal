// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_boolplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/boolplanmodifier"
	speakeasy_int64planmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/int64planmodifier"
	speakeasy_listplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/listplanmodifier"
	speakeasy_mapplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/mapplanmodifier"
	speakeasy_numberplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/numberplanmodifier"
	speakeasy_objectplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/objectplanmodifier"
	speakeasy_stringplanmodifier "github.com/epilot-dev/terraform-provider-epilot-portal/internal/planmodifiers/stringplanmodifier"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators"
	speakeasy_numbervalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/numbervalidators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/listplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/numberplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"regexp"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PortalConfigResource{}
var _ resource.ResourceWithImportState = &PortalConfigResource{}

func NewPortalConfigResource() resource.Resource {
	return &PortalConfigResource{}
}

// PortalConfigResource defines the resource implementation.
type PortalConfigResource struct {
	client *sdk.SDK
}

// PortalConfigResourceModel describes the resource data model.
type PortalConfigResourceModel struct {
	AccessToken                 types.String                                      `tfsdk:"access_token"`
	AdvancedMfa                 *tfTypes.UpsertPortalConfigAdvancedMfa            `tfsdk:"advanced_mfa"`
	AllowedFileExtensions       *tfTypes.AllowedFileExtensions                    `tfsdk:"allowed_file_extensions"`
	ApprovalStateAttributes     types.String                                      `tfsdk:"approval_state_attributes"`
	AuthSettings                *tfTypes.UpsertPortalConfigAuthSettings           `tfsdk:"auth_settings"`
	CognitoDetails              *tfTypes.UpsertPortalConfigCognitoDetails         `tfsdk:"cognito_details"`
	Config                      types.String                                      `tfsdk:"config"`
	ContactIdentifiers          []types.String                                    `tfsdk:"contact_identifiers"`
	ContractIdentifiers         []tfTypes.ContractIdentifier                      `tfsdk:"contract_identifiers"`
	ContractSelectorConfig      *tfTypes.UpsertPortalConfigContractSelectorConfig `tfsdk:"contract_selector_config"`
	DefaultUserToNotify         *tfTypes.DefaultUserToNotify                      `tfsdk:"default_user_to_notify"`
	DesignID                    types.String                                      `tfsdk:"design_id"`
	Domain                      types.String                                      `tfsdk:"domain"`
	EmailTemplates              *tfTypes.EmailTemplates                           `tfsdk:"email_templates"`
	Enabled                     types.Bool                                        `tfsdk:"enabled"`
	EntityActions               []tfTypes.EntityActions                           `tfsdk:"entity_actions"`
	EntityEditRules             []tfTypes.EntityEditRules                         `tfsdk:"entity_edit_rules"`
	EntityIdentifiers           *tfTypes.UpsertPortalConfigEntityIdentifiers      `tfsdk:"entity_identifiers"`
	ExtensionHooks              map[string]tfTypes.ExtensionHookConfig            `tfsdk:"extension_hooks"`
	Extensions                  []tfTypes.ExtensionConfig                         `tfsdk:"extensions"`
	FeatureFlags                map[string]types.Bool                             `tfsdk:"feature_flags"`
	FeatureSettings             *tfTypes.UpsertPortalConfigFeatureSettings        `tfsdk:"feature_settings"`
	Grants                      []tfTypes.Grant                                   `tfsdk:"grants"`
	ID                          types.String                                      `tfsdk:"id"`
	IdentityProviders           []tfTypes.ProviderPublicConfig                    `tfsdk:"identity_providers"`
	Images                      *tfTypes.UpsertPortalConfigImages                 `tfsdk:"images"`
	InactiveContractCutoffYears types.Number                                      `tfsdk:"inactive_contract_cutoff_years"`
	IsEpilotDomain              types.Bool                                        `tfsdk:"is_epilot_domain"`
	MeterReadingGracePeriod     types.Number                                      `tfsdk:"meter_reading_grace_period"`
	Name                        types.String                                      `tfsdk:"name"`
	OrgSettings                 *tfTypes.OrgSettings                              `tfsdk:"org_settings"`
	OrganizationID              types.String                                      `tfsdk:"organization_id"`
	Origin                      types.String                                      `tfsdk:"origin"`
	Pages                       map[string]tfTypes.Page                           `tfsdk:"pages"`
	PreventSearchEngineIndexing types.Bool                                        `tfsdk:"prevent_search_engine_indexing"`
	RegistrationIdentifiers     []tfTypes.ContractIdentifier                      `tfsdk:"registration_identifiers"`
	SelfRegistrationSetting     types.String                                      `tfsdk:"self_registration_setting"`
	TriggeredJourneys           []tfTypes.TriggeredJourneys                       `tfsdk:"triggered_journeys"`
}

func (r *PortalConfigResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_config"
}

func (r *PortalConfigResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalConfig Resource",
		Attributes: map[string]schema.Attribute{
			"access_token": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Access token for the portal. Requires replacement if changed.`,
			},
			"advanced_mfa": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Advanced MFA feature flag. Requires replacement if changed.`,
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"allowed_file_extensions": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"archive": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"audio_video": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"cad": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"calendar": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"document": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"email": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"image": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"other": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"presentation": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
					"spreadsheet": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
				},
				Description: `Allowed file extensions for upload. Requires replacement if changed.`,
			},
			"approval_state_attributes": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Requires replacement if changed.; Parsed as JSON.`,
				Validators: []validator.String{
					validators.IsValidJSON(),
				},
			},
			"auth_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"entry_point": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `must be one of ["PASSWORD", "SSO"]; Requires replacement if changed.`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"PASSWORD",
								"SSO",
							),
						},
					},
					"passwordless_login": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Passwordless login feature flag. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
					},
					"preferred_sso_providers": schema.ListAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
						},
						ElementType: types.StringType,
						Description: `Requires replacement if changed.`,
					},
				},
				Description: `Authentication settings for the portal. Requires replacement if changed.`,
			},
			"cognito_details": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"cognito_user_pool_arn": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Cognito user pool ARN. Requires replacement if changed.`,
					},
					"cognito_user_pool_client_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Cognito user pool client ID. Requires replacement if changed.`,
					},
					"cognito_user_pool_id": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Cognito user pool ID. Requires replacement if changed.`,
					},
					"password_policy": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"minimum_length": schema.Int64Attribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Int64{
									int64planmodifier.RequiresReplaceIfConfigured(),
									speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
								},
								Description: `Minimum password length. Requires replacement if changed.`,
							},
							"require_lowercase": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Require lowercase characters. Requires replacement if changed.`,
							},
							"require_numbers": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Require numbers. Requires replacement if changed.`,
							},
							"require_symbols": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Require symbols. Requires replacement if changed.`,
							},
							"require_uppercase": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Require uppercase characters. Requires replacement if changed.`,
							},
						},
						Description: `Password policy for the portal. Requires replacement if changed.`,
					},
				},
				Description: `AWS Cognito Pool details for the portal. Requires replacement if changed.`,
			},
			"config": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Stringified object with configuration details. Requires replacement if changed.`,
			},
			"contact_identifiers": schema.ListAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				ElementType: types.StringType,
				Description: `Deprecated. Use registration_identifiers instead. Requires replacement if changed.`,
			},
			"contract_identifiers": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Name of the identifier/attribute. Requires replacement if changed.`,
						},
						"schema": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `URL-friendly identifier for the entity schema. must be one of ["contact", "contract", "file", "order", "opportunity", "product", "price", "meter", "meter_counter"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"contact",
									"contract",
									"file",
									"order",
									"opportunity",
									"product",
									"price",
									"meter",
									"meter_counter",
								),
							},
						},
					},
				},
				Description: `Identifiers to identify a contract by a portal user. Requires replacement if changed.`,
			},
			"contract_selector_config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"show_inactive": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Whether to show inactive contracts in the selector. Requires replacement if changed.`,
					},
					"title_path": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Path to the property to use as the contract title. Requires replacement if changed.`,
					},
				},
				Description: `Configuration for contract selector in the portal. Requires replacement if changed.`,
			},
			"default_user_to_notify": schema.SingleNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
				},
				Attributes: map[string]schema.Attribute{
					"on_pending_user": schema.ListNestedAttribute{
						Optional: true,
						PlanModifiers: []planmodifier.List{
							listplanmodifier.RequiresReplaceIfConfigured(),
						},
						NestedObject: schema.NestedAttributeObject{
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"additional_properties": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.; Parsed as JSON.`,
									Validators: []validator.String{
										validators.IsValidJSON(),
									},
								},
								"display_name": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"email": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"image_uri": schema.SingleNestedAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.Object{
										objectplanmodifier.RequiresReplaceIfConfigured(),
									},
									Attributes: map[string]schema.Attribute{
										"key": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"original": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"thumbnail_32": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
										"thumbnail_64": schema.StringAttribute{
											Optional: true,
											PlanModifiers: []planmodifier.String{
												stringplanmodifier.RequiresReplaceIfConfigured(),
											},
											Description: `Requires replacement if changed.`,
										},
									},
									Description: `Requires replacement if changed.`,
								},
								"org_id": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"phone": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"type": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"user_id": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
							},
						},
						Description: `Default admin users for pending user notification to notify. Requires replacement if changed.`,
					},
				},
				Description: `Default 360 user to notify upon an internal notification. Requires replacement if changed.`,
			},
			"design_id": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Entity ID. Requires replacement if changed.`,
			},
			"domain": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `The URL on which the portal is accessible. Requires replacement if changed.`,
			},
			"email_templates": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"advanced_auth": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"advanced_mfa": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"confirm_account": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"confirm_email_update": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"forgot_password": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"invitation": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"journey_login_otp": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"journey_sign_in_one_time_password": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"journey_sign_up": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"on_doc_upload": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"on_map_a_pending_user": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"on_new_quote": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"on_workflow_step_assigned": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
					"verify_code_to_set_password": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `Entity ID. Requires replacement if changed.`,
					},
				},
				Description: `Email templates used for authentication and internal processes. Requires replacement if changed.`,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Description: `Enable/Disable the portal access. Requires replacement if changed.`,
			},
			"entity_actions": schema.ListNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"action_label": schema.SingleNestedAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Object{
								objectplanmodifier.RequiresReplaceIfConfigured(),
							},
							Attributes: map[string]schema.Attribute{
								"de": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
								"en": schema.StringAttribute{
									Optional: true,
									PlanModifiers: []planmodifier.String{
										stringplanmodifier.RequiresReplaceIfConfigured(),
									},
									Description: `Requires replacement if changed.`,
								},
							},
							Description: `Requires replacement if changed.`,
						},
						"journey_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Entity ID. Requires replacement if changed.`,
						},
						"slug": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `URL-friendly identifier for the entity schema. must be one of ["contact", "contract", "file", "order", "opportunity", "product", "price", "meter", "meter_counter"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"contact",
									"contract",
									"file",
									"order",
									"opportunity",
									"product",
									"price",
									"meter",
									"meter_counter",
								),
							},
						},
					},
				},
				Description: `Journey actions allowed on an entity by a portal user. Requires replacement if changed.`,
			},
			"entity_edit_rules": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"allowed_decrement": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"allowed_increment": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"attribute": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"cadence_period": schema.NumberAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Number{
								numberplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_numberplanmodifier.SuppressDiff(speakeasy_numberplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"cadence_period_type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `must be one of ["days", "weeks", "months"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"days",
									"weeks",
									"months",
								),
							},
						},
						"changes_allowed": schema.Int64Attribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"grace_period": schema.Int64Attribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"number_of_days_before_restriction": schema.Int64Attribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Int64{
								int64planmodifier.RequiresReplaceIfConfigured(),
								speakeasy_int64planmodifier.SuppressDiff(speakeasy_int64planmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.`,
						},
						"rule_type": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `must be one of ["cadence", "relative_to_current_value", "days_before_date", "overdue_payments"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"cadence",
									"relative_to_current_value",
									"days_before_date",
									"overdue_payments",
								),
							},
						},
						"slug": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `URL-friendly identifier for the entity schema. must be one of ["contact", "contract", "file", "order", "opportunity", "product", "price", "meter", "meter_counter"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"contact",
									"contract",
									"file",
									"order",
									"opportunity",
									"product",
									"price",
									"meter",
									"meter_counter",
								),
							},
						},
					},
				},
				Description: `Rules for editing an entity by a portal user. Requires replacement if changed.`,
			},
			"entity_identifiers": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"type": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
						},
						Attributes: map[string]schema.Attribute{
							"attributes": schema.ListAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.List{
									listplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
								},
								ElementType: types.StringType,
								Description: `Attributes used to identify an entity. Requires replacement if changed.`,
							},
							"is_enabled": schema.BoolAttribute{
								Computed: true,
								Optional: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
								},
								Description: `Enable/Disable the entity identifier. Requires replacement if changed.`,
							},
						},
						Description: `Requires replacement if changed.`,
					},
				},
				Description: `Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead. Requires replacement if changed.`,
			},
			"extension_hooks": schema.MapNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `The ID of the app that is being hooked into. Requires replacement if changed.`,
						},
						"hook_id": schema.StringAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `The ID of the hook that is being configured. Requires replacement if changed.`,
						},
					},
				},
				Description: `Configured Portal extensions hooks. Requires replacement if changed.`,
			},
			"extensions": schema.ListNestedAttribute{
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
				},
				NestedObject: schema.NestedAttributeObject{
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Required: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Name of the extension. Requires replacement if changed.`,
						},
						"options": schema.MapAttribute{
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
							},
							ElementType: types.StringType,
							Description: `Extension option values. Requires replacement if changed.`,
						},
						"status": schema.StringAttribute{
							Computed: true,
							Optional: true,
							Default:  stringdefault.StaticString("installed"),
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
							},
							Description: `Status of the extension. Default: "installed"; must be one of ["installed", "enabled"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"installed",
									"enabled",
								),
							},
						},
					},
				},
				Description: `Configured Portal extensions. Requires replacement if changed.`,
			},
			"feature_flags": schema.MapAttribute{
				Computed:    true,
				ElementType: types.BoolType,
				Description: `Feature flags for the portal`,
			},
			"feature_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"billing": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Billing feature flag. Requires replacement if changed.`,
					},
					"change_due_date": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Change due date feature flag. Requires replacement if changed.`,
					},
					"new_design": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Enable or disable the new design for the portal. Requires replacement if changed.`,
					},
					"start_page": schema.BoolAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
						},
						Description: `Start page feature flag. Requires replacement if changed.`,
					},
				},
				Description: `Feature settings for the portal. Requires replacement if changed.`,
			},
			"grants": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"action": schema.StringAttribute{
							Computed:    true,
							Description: `Action for granting permission`,
						},
						"effect": schema.StringAttribute{
							Computed:    true,
							Default:     stringdefault.StaticString("allow"),
							Description: `Effect of the permission. Default: "allow"; must be one of ["allow", "deny"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"allow",
									"deny",
								),
							},
						},
						"resource": schema.StringAttribute{
							Computed:    true,
							Description: `Resource for granting permission`,
						},
					},
				},
				Description: `Permissions granted to a portal user while accessing entities`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the organization`,
			},
			"identity_providers": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"display_name": schema.StringAttribute{
							Computed:    true,
							Description: `Human-readable display name for identity provider shown in login`,
						},
						"mobile_oidc_config": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"client_id": schema.StringAttribute{
									Computed:    true,
									Description: `Client ID for the mobile app`,
								},
								"client_secret": schema.StringAttribute{
									Computed:    true,
									Description: `Client Secret for the mobile app`,
								},
							},
						},
						"oidc_config": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"client_id": schema.StringAttribute{
									Computed: true,
								},
								"client_secret": schema.StringAttribute{
									Computed: true,
								},
								"metadata": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"authorization_endpoint": schema.StringAttribute{
											Computed:    true,
											Description: `URL of the authorization endpoint`,
										},
										"mobile_redirect_uri": schema.StringAttribute{
											Computed:    true,
											Description: `URL of the mobile redirect URI`,
										},
										"token_endpoint": schema.StringAttribute{
											Computed:    true,
											Description: `URL of the token endpoint`,
										},
										"userinfo_endpoint": schema.StringAttribute{
											Computed:    true,
											Description: `URL of the userinfo endpoint`,
										},
									},
								},
								"oidc_issuer": schema.StringAttribute{
									Computed:    true,
									Description: `Issuing Authority URL`,
								},
								"prompt": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["login", "select_account", "consent"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"login",
											"select_account",
											"consent",
										),
									},
								},
								"redirect_uri": schema.StringAttribute{
									Computed:    true,
									Description: `Redirect URI for the OIDC flow`,
								},
								"scope": schema.StringAttribute{
									Computed:    true,
									Description: `Space-separated list of OAuth 2.0 scopes to request from OpenID Connect`,
								},
							},
						},
						"slug": schema.StringAttribute{
							Computed:    true,
							Description: `URL-friendly slug to use as organization-unique identifier for Provider`,
							Validators: []validator.String{
								stringvalidator.RegexMatches(regexp.MustCompile(`[0-9a-z-]+`), "must match pattern "+regexp.MustCompile(`[0-9a-z-]+`).String()),
							},
						},
					},
				},
			},
			"images": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
				},
				Attributes: map[string]schema.Attribute{
					"order_left_teaser": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `URL of the order left teaser image. Requires replacement if changed.`,
					},
					"order_right_teaser": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `URL of the order right teaser image. Requires replacement if changed.`,
					},
					"welcome_banner": schema.StringAttribute{
						Computed: true,
						Optional: true,
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplaceIfConfigured(),
							speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
						},
						Description: `URL of the welcome banner image. Requires replacement if changed.`,
					},
				},
				Description: `Teaser & Banner Image web links. Requires replacement if changed.`,
			},
			"inactive_contract_cutoff_years": schema.NumberAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Number{
					numberplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_numberplanmodifier.SuppressDiff(speakeasy_numberplanmodifier.ExplicitSuppress),
				},
				Description: `Number of years to look back for showing inactive contracts in the portal. Requires replacement if changed.`,
			},
			"is_epilot_domain": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Description: `Mark true if the domain is an Epilot domain. Requires replacement if changed.`,
			},
			"meter_reading_grace_period": schema.NumberAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Number{
					numberplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_numberplanmodifier.SuppressDiff(speakeasy_numberplanmodifier.ExplicitSuppress),
				},
				Description: `Grace period in days for meter readings. Requires replacement if changed.`,
			},
			"name": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `A short name to identify your portal. Requires replacement if changed.`,
			},
			"org_settings": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"canary": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Enable/Disable the canary feature`,
							},
						},
						Description: `Canary feature flag`,
					},
					"notracking": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Disable browser-side scripts that track advanced usage metrics`,
							},
						},
						Description: `Disable Advanced Usage Metrics`,
					},
				},
				Description: `Organization settings`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the organization`,
			},
			"origin": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `Origin of the portal. must be one of ["END_CUSTOMER_PORTAL", "INSTALLER_PORTAL"]; Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"END_CUSTOMER_PORTAL",
						"INSTALLER_PORTAL",
					),
				},
			},
			"pages": schema.MapNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"additional_properties": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Requires replacement if changed.; Parsed as JSON.`,
							Validators: []validator.String{
								validators.IsValidJSON(),
							},
						},
						"blocks": schema.MapNestedAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							NestedObject: schema.NestedAttributeObject{
								Validators: []validator.Object{
									speakeasy_objectvalidators.NotNull(),
								},
								PlanModifiers: []planmodifier.Object{
									objectplanmodifier.RequiresReplaceIfConfigured(),
									speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
								},
								Attributes: map[string]schema.Attribute{
									"additional_properties": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `Requires replacement if changed.; Parsed as JSON.`,
										Validators: []validator.String{
											validators.IsValidJSON(),
										},
									},
									"id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The id of the block. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
									"order": schema.NumberAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Number{
											numberplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_numberplanmodifier.SuppressDiff(speakeasy_numberplanmodifier.ExplicitSuppress),
										},
										Description: `The order of the block. Not Null; Requires replacement if changed.`,
										Validators: []validator.Number{
											speakeasy_numbervalidators.NotNull(),
										},
									},
									"parent_id": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The id of the parent block. Requires replacement if changed.`,
									},
									"props": schema.SingleNestedAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.Object{
											objectplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
										},
										Attributes: map[string]schema.Attribute{
											"additional_properties": schema.StringAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.String{
													stringplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
												},
												Description: `Requires replacement if changed.; Parsed as JSON.`,
												Validators: []validator.String{
													validators.IsValidJSON(),
												},
											},
											"content": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													objectplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Description: `The content of the block. Requires replacement if changed.`,
											},
											"design": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													objectplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Description: `The design of the block. Requires replacement if changed.`,
											},
											"visibility": schema.SingleNestedAttribute{
												Computed: true,
												Optional: true,
												PlanModifiers: []planmodifier.Object{
													objectplanmodifier.RequiresReplaceIfConfigured(),
													speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
												},
												Description: `The conditions that need to be met for the block to be shown. Requires replacement if changed.`,
											},
										},
										Description: `Requires replacement if changed.`,
									},
									"type": schema.StringAttribute{
										Computed: true,
										Optional: true,
										PlanModifiers: []planmodifier.String{
											stringplanmodifier.RequiresReplaceIfConfigured(),
											speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
										},
										Description: `The type of the block. eg; tabs, tab, group, attribute. Not Null; Requires replacement if changed.`,
										Validators: []validator.String{
											speakeasy_stringvalidators.NotNull(),
										},
									},
								},
							},
							Description: `Requires replacement if changed.`,
						},
						"content": schema.MapAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `The content of the page. Requires replacement if changed.`,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"design": schema.MapAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `The design of the page. Requires replacement if changed.`,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
						"id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The id of the page. Not Null; Requires replacement if changed.`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"is_deleted": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Send the flag as true to delete the page. Requires replacement if changed.`,
						},
						"is_entry_route": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Whether the page is the entry route. Requires replacement if changed.`,
						},
						"is_public": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Whether the page is public. Requires replacement if changed.`,
						},
						"is_system": schema.BoolAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Bool{
								boolplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
							},
							Description: `Whether the page is a system page. Requires replacement if changed.`,
						},
						"last_modified_at": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Last modified timestamp of the Page. Requires replacement if changed.`,
							Validators: []validator.String{
								validators.IsRFC3339(),
							},
						},
						"order": schema.NumberAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Number{
								numberplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_numberplanmodifier.SuppressDiff(speakeasy_numberplanmodifier.ExplicitSuppress),
							},
							Description: `The order of the block. Not Null; Requires replacement if changed.`,
							Validators: []validator.Number{
								speakeasy_numbervalidators.NotNull(),
							},
						},
						"parent_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The id of the parent page. Requires replacement if changed.`,
						},
						"path": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The path of the page. Requires replacement if changed.`,
						},
						"schema": schema.ListAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.List{
								listplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `Requires replacement if changed.`,
						},
						"slug": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `The slug of the page. Not Null; Requires replacement if changed.`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"visibility": schema.MapAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.Map{
								mapplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_mapplanmodifier.SuppressDiff(speakeasy_mapplanmodifier.ExplicitSuppress),
							},
							ElementType: types.StringType,
							Description: `The conditions that need to be met for the page to be shown. Requires replacement if changed.`,
							Validators: []validator.Map{
								mapvalidator.ValueStringsAre(validators.IsValidJSON()),
							},
						},
					},
				},
				Description: `Requires replacement if changed.`,
			},
			"prevent_search_engine_indexing": schema.BoolAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_boolplanmodifier.SuppressDiff(speakeasy_boolplanmodifier.ExplicitSuppress),
				},
				Description: `Prevent indexing by search engines. Requires replacement if changed.`,
			},
			"registration_identifiers": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Name of the identifier/attribute. Requires replacement if changed.`,
						},
						"schema": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `URL-friendly identifier for the entity schema. must be one of ["contact", "contract", "file", "order", "opportunity", "product", "price", "meter", "meter_counter"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"contact",
									"contract",
									"file",
									"order",
									"opportunity",
									"product",
									"price",
									"meter",
									"meter_counter",
								),
							},
						},
					},
				},
				Description: `Identifiers to identify a contact of a portal user during the registration. Requires replacement if changed.`,
			},
			"self_registration_setting": schema.StringAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Description: `must be one of ["ALLOW_WITH_CONTACT_CREATION", "ALLOW_WITHOUT_CONTACT_CREATION", "DENY"]; Requires replacement if changed.`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ALLOW_WITH_CONTACT_CREATION",
						"ALLOW_WITHOUT_CONTACT_CREATION",
						"DENY",
					),
				},
			},
			"triggered_journeys": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				PlanModifiers: []planmodifier.List{
					listplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_listplanmodifier.SuppressDiff(speakeasy_listplanmodifier.ExplicitSuppress),
				},
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					PlanModifiers: []planmodifier.Object{
						objectplanmodifier.RequiresReplaceIfConfigured(),
						speakeasy_objectplanmodifier.SuppressDiff(speakeasy_objectplanmodifier.ExplicitSuppress),
					},
					Attributes: map[string]schema.Attribute{
						"journey_id": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `Entity ID. Requires replacement if changed.`,
						},
						"trigger_name": schema.StringAttribute{
							Computed: true,
							Optional: true,
							PlanModifiers: []planmodifier.String{
								stringplanmodifier.RequiresReplaceIfConfigured(),
								speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
							},
							Description: `must be one of ["FIRST_LOGIN", "ACCEPT_ORDER", "DECLINE_ORDER"]; Requires replacement if changed.`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"FIRST_LOGIN",
									"ACCEPT_ORDER",
									"DECLINE_ORDER",
								),
							},
						},
					},
				},
				Description: `Journeys automatically opened on a portal user action. Requires replacement if changed.`,
			},
		},
	}
}

func (r *PortalConfigResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalConfigResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PortalConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	upsertPortalConfig := *data.ToSharedUpsertPortalConfig()
	origin := shared.Origin(data.Origin.ValueString())
	request := operations.UpsertPortalRequest{
		UpsertPortalConfig: upsertPortalConfig,
		Origin:             origin,
	}
	res, err := r.client.ECPAdmin.UpsertPortal(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalConfig != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPortalConfig(res.PortalConfig)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PortalConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; we rely entirely on CREATE API request response

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PortalConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; all attributes marked as RequiresReplace

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PortalConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Not Implemented; entity does not have a configured DELETE operation
}

func (r *PortalConfigResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource portal_config.")
}
