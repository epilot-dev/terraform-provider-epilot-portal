// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PortalConfigResource{}
var _ resource.ResourceWithImportState = &PortalConfigResource{}

func NewPortalConfigResource() resource.Resource {
	return &PortalConfigResource{}
}

// PortalConfigResource defines the resource implementation.
type PortalConfigResource struct {
	// Provider configured SDK client.
	client *sdk.SDK
}

// PortalConfigResourceModel describes the resource data model.
type PortalConfigResourceModel struct {
	AccessToken                 types.String                                        `tfsdk:"access_token"`
	AdvancedMfa                 *tfTypes.UpsertPortalConfigV3AdvancedMfa            `tfsdk:"advanced_mfa"`
	AllowedFileExtensions       *tfTypes.AllowedFileExtensions                      `tfsdk:"allowed_file_extensions"`
	ApprovalStateAttributes     jsontypes.Normalized                                `tfsdk:"approval_state_attributes"`
	AuthSettings                *tfTypes.UpsertPortalConfigV3AuthSettings           `tfsdk:"auth_settings"`
	CognitoDetails              *tfTypes.UpsertPortalConfigV3CognitoDetails         `tfsdk:"cognito_details"`
	Config                      types.String                                        `tfsdk:"config"`
	ContactIdentifiers          []types.String                                      `tfsdk:"contact_identifiers"`
	ContractIdentifiers         jsontypes.Normalized                                `tfsdk:"contract_identifiers"`
	ContractSelectorConfig      *tfTypes.UpsertPortalConfigV3ContractSelectorConfig `tfsdk:"contract_selector_config"`
	DefaultUserToNotify         *tfTypes.UpsertPortalConfigV3DefaultUserToNotify    `tfsdk:"default_user_to_notify"`
	DesignID                    types.String                                        `tfsdk:"design_id"`
	Domain                      types.String                                        `tfsdk:"domain"`
	EmailTemplates              *tfTypes.EmailTemplates                             `tfsdk:"email_templates"`
	Enabled                     types.Bool                                          `tfsdk:"enabled"`
	EntityActions               []tfTypes.EntityActions                             `tfsdk:"entity_actions"`
	EntityEditRules             jsontypes.Normalized                                `tfsdk:"entity_edit_rules"`
	EntityIdentifiers           *tfTypes.UpsertPortalConfigV3EntityIdentifiers      `tfsdk:"entity_identifiers"`
	ExtensionHooks              map[string]tfTypes.ExtensionHookConfig              `tfsdk:"extension_hooks"`
	Extensions                  []tfTypes.ExtensionConfig                           `tfsdk:"extensions"`
	FeatureFlags                jsontypes.Normalized                                `tfsdk:"feature_flags"`
	FeatureSettings             *tfTypes.UpsertPortalConfigV3FeatureSettings        `tfsdk:"feature_settings"`
	Grants                      jsontypes.Normalized                                `tfsdk:"grants"`
	IdentityProviders           jsontypes.Normalized                                `tfsdk:"identity_providers"`
	Images                      *tfTypes.UpsertPortalConfigV3Images                 `tfsdk:"images"`
	InactiveContractCutoffYears types.Float64                                       `tfsdk:"inactive_contract_cutoff_years"`
	IsDummy                     types.Bool                                          `tfsdk:"is_dummy"`
	IsEpilotDomain              types.Bool                                          `tfsdk:"is_epilot_domain"`
	IsV3Item                    types.Bool                                          `tfsdk:"is_v3_item"`
	MeterReadingGracePeriod     types.Float64                                       `tfsdk:"meter_reading_grace_period"`
	Name                        types.String                                        `tfsdk:"name"`
	OrgSettings                 *tfTypes.PortalConfigV3OrgSettings                  `tfsdk:"org_settings"`
	OrganizationID              types.String                                        `tfsdk:"organization_id"`
	Origin                      types.String                                        `tfsdk:"origin"`
	Pages                       jsontypes.Normalized                                `tfsdk:"pages"`
	PortalID                    types.String                                        `tfsdk:"portal_id"`
	PortalSkV3                  types.String                                        `tfsdk:"portal_sk_v3"`
	PreventSearchEngineIndexing types.Bool                                          `tfsdk:"prevent_search_engine_indexing"`
	RegistrationIdentifiers     jsontypes.Normalized                                `tfsdk:"registration_identifiers"`
	SelfRegistrationSetting     types.String                                        `tfsdk:"self_registration_setting"`
	TriggeredJourneys           []tfTypes.PortalConfigV3TriggeredJourneys           `tfsdk:"triggered_journeys"`
}

func (r *PortalConfigResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_config"
}

func (r *PortalConfigResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalConfig Resource",
		Attributes: map[string]schema.Attribute{
			"access_token": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Access token for the portal`,
			},
			"advanced_mfa": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Advanced MFA feature flag`,
					},
				},
			},
			"allowed_file_extensions": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"archive": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"audio_video": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"cad": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"calendar": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"document": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"email": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"image": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"other": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"presentation": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
					"spreadsheet": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Allowed file extensions for upload`,
			},
			"approval_state_attributes": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
			},
			"auth_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"auto_redirect_to_sso": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Decide whether to automatically redirect to the provider page during login, which would completely bypass showing the portal authentication page.`,
					},
					"entry_point": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `must be one of ["PASSWORD", "SSO"]`,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"PASSWORD",
								"SSO",
							),
						},
					},
					"passwordless_login": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Passwordless login feature flag`,
							},
						},
					},
					"preferred_sso_providers": schema.ListAttribute{
						Computed:    true,
						Optional:    true,
						ElementType: types.StringType,
					},
				},
				Description: `Authentication settings for the portal`,
			},
			"cognito_details": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"cognito_user_pool_arn": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Cognito user pool ARN`,
					},
					"cognito_user_pool_client_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Cognito user pool client ID`,
					},
					"cognito_user_pool_id": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Cognito user pool ID`,
					},
					"password_policy": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"minimum_length": schema.Int64Attribute{
								Computed:    true,
								Optional:    true,
								Description: `Minimum password length`,
							},
							"require_lowercase": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Require lowercase characters`,
							},
							"require_numbers": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Require numbers`,
							},
							"require_symbols": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Require symbols`,
							},
							"require_uppercase": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Require uppercase characters`,
							},
						},
						Description: `Password policy for the portal`,
					},
				},
				Description: `AWS Cognito Pool details for the portal`,
			},
			"config": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Stringified object with configuration details`,
			},
			"contact_identifiers": schema.ListAttribute{
				Computed:           true,
				Optional:           true,
				ElementType:        types.StringType,
				DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
				Description:        `Deprecated. Use registration_identifiers instead.`,
			},
			"contract_identifiers": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Identifiers to identify a contract by a portal user. Parsed as JSON.`,
			},
			"contract_selector_config": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"show_inactive": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Whether to show inactive contracts in the selector`,
					},
					"title_path": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Path to the property to use as the contract title`,
					},
				},
				Description: `Configuration for contract selector in the portal`,
			},
			"default_user_to_notify": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"on_pending_user": schema.ListNestedAttribute{
						Computed: true,
						Optional: true,
						NestedObject: schema.NestedAttributeObject{
							Validators: []validator.Object{
								speakeasy_objectvalidators.NotNull(),
							},
							Attributes: map[string]schema.Attribute{
								"additional_properties": schema.StringAttribute{
									CustomType:  jsontypes.NormalizedType{},
									Computed:    true,
									Optional:    true,
									Description: `Parsed as JSON.`,
								},
								"display_name": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"email": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"image_uri": schema.SingleNestedAttribute{
									Computed: true,
									Optional: true,
									Attributes: map[string]schema.Attribute{
										"key": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"original": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"thumbnail_32": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
										"thumbnail_64": schema.StringAttribute{
											Computed: true,
											Optional: true,
										},
									},
								},
								"org_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"phone": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"user_id": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
						Description: `Default admin users for pending user notification to notify`,
					},
				},
				Description: `Default 360 user to notify upon an internal notification`,
			},
			"design_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Entity ID`,
			},
			"domain": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The URL on which the portal is accessible`,
			},
			"email_templates": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"advanced_auth": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"advanced_mfa": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"confirm_account": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"confirm_email_update": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"forgot_password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"invitation": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"journey_login_otp": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"journey_sign_in_one_time_password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"journey_sign_up": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"on_doc_upload": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"on_map_a_pending_user": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"on_new_quote": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"on_workflow_step_assigned": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
					"verify_code_to_set_password": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Entity ID`,
					},
				},
				Description: `Email templates used for authentication and internal processes`,
			},
			"enabled": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Enable/Disable the portal access`,
			},
			"entity_actions": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"action_label": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"de": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
								"en": schema.StringAttribute{
									Computed: true,
									Optional: true,
								},
							},
						},
						"journey_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Entity ID`,
						},
						"slug": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `URL-friendly identifier for the entity schema. must be one of ["contact", "contract", "file", "order", "opportunity", "product", "price", "meter", "meter_counter"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"contact",
									"contract",
									"file",
									"order",
									"opportunity",
									"product",
									"price",
									"meter",
									"meter_counter",
								),
							},
						},
					},
				},
				Description: `Journey actions allowed on an entity by a portal user`,
			},
			"entity_edit_rules": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Rules for editing an entity by a portal user. Parsed as JSON.`,
			},
			"entity_identifiers": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"type": schema.SingleNestedAttribute{
						Computed: true,
						Optional: true,
						Attributes: map[string]schema.Attribute{
							"attributes": schema.ListAttribute{
								Computed:    true,
								Optional:    true,
								ElementType: types.StringType,
								Description: `Attributes used to identify an entity`,
							},
							"is_enabled": schema.BoolAttribute{
								Computed:    true,
								Optional:    true,
								Description: `Enable/Disable the entity identifier`,
							},
						},
					},
				},
				DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
				Description:        `Identifiers used to identify an entity by a portal user. Deprecated. Use contract_identifiers instead.`,
			},
			"extension_hooks": schema.MapNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The ID of the app that is being hooked into.`,
						},
						"hook_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The ID of the hook that is being configured.`,
						},
					},
				},
				Description: `Configured Portal extensions hooks`,
			},
			"extensions": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Name of the extension. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
						"options": schema.MapAttribute{
							Computed:    true,
							Optional:    true,
							ElementType: types.StringType,
							Description: `Extension option values.`,
						},
						"status": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Default:     stringdefault.StaticString(`installed`),
							Description: `Status of the extension. Default: "installed"; must be one of ["installed", "enabled"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"installed",
									"enabled",
								),
							},
						},
					},
				},
				Description: `Configured Portal extensions`,
			},
			"feature_flags": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Description: `Feature flags for the portal. Parsed as JSON.`,
			},
			"feature_settings": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"billing": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Billing feature flag`,
					},
					"change_due_date": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Change due date feature flag`,
					},
					"new_design": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Enable or disable the new design for the portal`,
					},
					"start_page": schema.BoolAttribute{
						Computed:    true,
						Optional:    true,
						Description: `Start page feature flag`,
					},
				},
				Description: `Feature settings for the portal`,
			},
			"grants": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Description: `Permissions granted to a portal user while accessing entities. Parsed as JSON.`,
			},
			"identity_providers": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Description: `Parsed as JSON.`,
			},
			"images": schema.SingleNestedAttribute{
				Computed: true,
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"order_left_teaser": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `URL of the order left teaser image`,
					},
					"order_right_teaser": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `URL of the order right teaser image`,
					},
					"welcome_banner": schema.StringAttribute{
						Computed:    true,
						Optional:    true,
						Description: `URL of the welcome banner image`,
					},
				},
				Description: `Teaser & Banner Image web links`,
			},
			"inactive_contract_cutoff_years": schema.Float64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Number of years to look back for showing inactive contracts in the portal`,
			},
			"is_dummy": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether this is a dummy/test portal configuration`,
			},
			"is_epilot_domain": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Mark true if the domain is an Epilot domain`,
			},
			"is_v3_item": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether this is a v3 portal configuration`,
			},
			"meter_reading_grace_period": schema.Float64Attribute{
				Computed:    true,
				Optional:    true,
				Description: `Grace period in days for meter readings`,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A short name to identify your portal`,
			},
			"org_settings": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"canary": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Enable/Disable the canary feature`,
							},
						},
						Description: `Canary feature flag`,
					},
					"notracking": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:    true,
								Description: `Disable browser-side scripts that track advanced usage metrics`,
							},
						},
						Description: `Disable Advanced Usage Metrics`,
					},
				},
				Description: `Organization settings`,
			},
			"organization_id": schema.StringAttribute{
				Computed:    true,
				Description: `ID of the organization`,
			},
			"origin": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Origin of the portal`,
			},
			"pages": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
			},
			"portal_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `ID of the portal`,
			},
			"portal_sk_v3": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Key of the portal config`,
			},
			"prevent_search_engine_indexing": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Prevent indexing by search engines`,
			},
			"registration_identifiers": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Identifiers to identify a contact of a portal user during the registration. Parsed as JSON.`,
			},
			"self_registration_setting": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `must be one of ["ALLOW_WITH_CONTACT_CREATION", "ALLOW_WITHOUT_CONTACT_CREATION", "DENY"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"ALLOW_WITH_CONTACT_CREATION",
						"ALLOW_WITHOUT_CONTACT_CREATION",
						"DENY",
					),
				},
			},
			"triggered_journeys": schema.ListNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"journey_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `Entity ID`,
						},
						"trigger_name": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `must be one of ["FIRST_LOGIN", "ACCEPT_ORDER", "DECLINE_ORDER"]`,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"FIRST_LOGIN",
									"ACCEPT_ORDER",
									"DECLINE_ORDER",
								),
							},
						},
					},
				},
				Description: `Journeys automatically opened on a portal user action`,
			},
		},
	}
}

func (r *PortalConfigResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalConfigResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PortalConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToSharedUpsertPortalConfigV3(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.CreatePortalConfig(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalConfigV3 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalConfigV3(ctx, res.PortalConfigV3)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PortalConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPortalConfigV3Request(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.GetPortalConfigV3(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalConfigV3 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalConfigV3(ctx, res.PortalConfigV3)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PortalConfigResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsPutPortalConfigRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.PutPortalConfig(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PortalConfigV3 != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPortalConfigV3(ctx, res.PortalConfigV3)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalConfigResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PortalConfigResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeletePortalConfigRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.DeletePortalConfig(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PortalConfigResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("portal_id"), req.ID)...)
}
