// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *PortalPageDataSourceModel) RefreshFromSharedPage(resp *shared.Page) {
	if resp != nil {
		if resp.AdditionalProperties == nil {
			r.AdditionalProperties = types.StringNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
			r.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
		}
		if len(resp.Blocks) > 0 {
			r.Blocks = make(map[string]tfTypes.Block)
			for blockKey, blockValue := range resp.Blocks {
				var blockResult tfTypes.Block
				if blockValue.AdditionalProperties == nil {
					blockResult.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(blockValue.AdditionalProperties)
					blockResult.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				blockResult.ID = types.StringValue(blockValue.ID)
				blockResult.Order = types.NumberValue(big.NewFloat(float64(blockValue.Order)))
				blockResult.ParentID = types.StringPointerValue(blockValue.ParentID)
				if blockValue.Props == nil {
					blockResult.Props = nil
				} else {
					blockResult.Props = &tfTypes.BlockProps{}
					if blockValue.Props.AdditionalProperties == nil {
						blockResult.Props.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult2, _ := json.Marshal(blockValue.Props.AdditionalProperties)
						blockResult.Props.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
					}
					if blockValue.Props.Content == nil {
						blockResult.Props.Content = nil
					} else {
						blockResult.Props.Content = &tfTypes.Content{}
					}
					if blockValue.Props.Design == nil {
						blockResult.Props.Design = nil
					} else {
						blockResult.Props.Design = &tfTypes.Content{}
					}
					if blockValue.Props.Visibility == nil {
						blockResult.Props.Visibility = nil
					} else {
						blockResult.Props.Visibility = &tfTypes.Content{}
					}
				}
				blockResult.Type = types.StringValue(blockValue.Type)
				r.Blocks[blockKey] = blockResult
			}
		}
		if len(resp.Content) > 0 {
			r.Content = make(map[string]types.String)
			for key, value := range resp.Content {
				result, _ := json.Marshal(value)
				r.Content[key] = types.StringValue(string(result))
			}
		}
		if len(resp.Design) > 0 {
			r.Design = make(map[string]types.String)
			for key1, value1 := range resp.Design {
				result1, _ := json.Marshal(value1)
				r.Design[key1] = types.StringValue(string(result1))
			}
		}
		r.ID = types.StringValue(resp.ID)
		r.IsDeleted = types.BoolPointerValue(resp.IsDeleted)
		r.IsEntryRoute = types.BoolPointerValue(resp.IsEntryRoute)
		r.IsPublic = types.BoolPointerValue(resp.IsPublic)
		r.IsSystem = types.BoolPointerValue(resp.IsSystem)
		if resp.LastModifiedAt != nil {
			r.LastModifiedAt = types.StringValue(resp.LastModifiedAt.Format(time.RFC3339Nano))
		} else {
			r.LastModifiedAt = types.StringNull()
		}
		r.Order = types.NumberValue(big.NewFloat(float64(resp.Order)))
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.Path = types.StringPointerValue(resp.Path)
		r.Schema = []types.String{}
		for _, v := range resp.Schema {
			r.Schema = append(r.Schema, types.StringValue(string(v)))
		}
		r.Slug = types.StringValue(resp.Slug)
		if len(resp.Visibility) > 0 {
			r.Visibility = make(map[string]types.String)
			for key2, value2 := range resp.Visibility {
				result2, _ := json.Marshal(value2)
				r.Visibility[key2] = types.StringValue(string(result2))
			}
		}
	}
}
