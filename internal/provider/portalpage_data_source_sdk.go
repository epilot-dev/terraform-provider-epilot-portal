// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PortalPageDataSourceModel) RefreshFromSharedPage(ctx context.Context, resp *shared.Page) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.AdditionalProperties == nil {
			r.AdditionalProperties = jsontypes.NewNormalizedNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
			r.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult))
		}
		if len(resp.Blocks) > 0 {
			r.Blocks = make(map[string]tfTypes.Block, len(resp.Blocks))
			for blockKey, blockValue := range resp.Blocks {
				var blockResult tfTypes.Block
				if blockValue.AdditionalProperties == nil {
					blockResult.AdditionalProperties = jsontypes.NewNormalizedNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(blockValue.AdditionalProperties)
					blockResult.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult1))
				}
				blockResult.ID = types.StringPointerValue(blockValue.ID)
				blockResult.Order = types.Float64Value(blockValue.Order)
				blockResult.ParentID = types.StringPointerValue(blockValue.ParentID)
				if blockValue.Props == nil {
					blockResult.Props = nil
				} else {
					blockResult.Props = &tfTypes.BlockProps{}
					if blockValue.Props.AdditionalProperties == nil {
						blockResult.Props.AdditionalProperties = jsontypes.NewNormalizedNull()
					} else {
						additionalPropertiesResult2, _ := json.Marshal(blockValue.Props.AdditionalProperties)
						blockResult.Props.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult2))
					}
					if len(blockValue.Props.Content) > 0 {
						blockResult.Props.Content = make(map[string]jsontypes.Normalized, len(blockValue.Props.Content))
						for key, value := range blockValue.Props.Content {
							result, _ := json.Marshal(value)
							blockResult.Props.Content[key] = jsontypes.NewNormalizedValue(string(result))
						}
					}
					if len(blockValue.Props.Design) > 0 {
						blockResult.Props.Design = make(map[string]jsontypes.Normalized, len(blockValue.Props.Design))
						for key1, value1 := range blockValue.Props.Design {
							result1, _ := json.Marshal(value1)
							blockResult.Props.Design[key1] = jsontypes.NewNormalizedValue(string(result1))
						}
					}
					if len(blockValue.Props.Visibility) > 0 {
						blockResult.Props.Visibility = make(map[string]jsontypes.Normalized, len(blockValue.Props.Visibility))
						for key2, value2 := range blockValue.Props.Visibility {
							result2, _ := json.Marshal(value2)
							blockResult.Props.Visibility[key2] = jsontypes.NewNormalizedValue(string(result2))
						}
					}
				}
				blockResult.Type = types.StringValue(blockValue.Type)

				r.Blocks[blockKey] = blockResult
			}
		}
		if len(resp.Content) > 0 {
			r.Content = make(map[string]jsontypes.Normalized, len(resp.Content))
			for key3, value3 := range resp.Content {
				result3, _ := json.Marshal(value3)
				r.Content[key3] = jsontypes.NewNormalizedValue(string(result3))
			}
		}
		if len(resp.Design) > 0 {
			r.Design = make(map[string]jsontypes.Normalized, len(resp.Design))
			for key4, value4 := range resp.Design {
				result4, _ := json.Marshal(value4)
				r.Design[key4] = jsontypes.NewNormalizedValue(string(result4))
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.IsDeleted = types.BoolPointerValue(resp.IsDeleted)
		r.IsEntryRoute = types.BoolPointerValue(resp.IsEntryRoute)
		r.IsPublic = types.BoolPointerValue(resp.IsPublic)
		r.IsSystem = types.BoolPointerValue(resp.IsSystem)
		r.LastModifiedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.LastModifiedAt))
		r.Order = types.Float64Value(resp.Order)
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.Path = types.StringPointerValue(resp.Path)
		r.Schema = make([]types.String, 0, len(resp.Schema))
		for _, v := range resp.Schema {
			r.Schema = append(r.Schema, types.StringValue(string(v)))
		}
		r.Slug = types.StringValue(resp.Slug)
		if len(resp.Visibility) > 0 {
			r.Visibility = make(map[string]jsontypes.Normalized, len(resp.Visibility))
			for key5, value5 := range resp.Visibility {
				result5, _ := json.Marshal(value5)
				r.Visibility[key5] = jsontypes.NewNormalizedValue(string(result5))
			}
		}
	}

	return diags
}

func (r *PortalPageDataSourceModel) ToOperationsGetPortalPageRequest(ctx context.Context) (*operations.GetPortalPageRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetPortalPageRequest{
		ID: id,
	}

	return &out, diags
}
