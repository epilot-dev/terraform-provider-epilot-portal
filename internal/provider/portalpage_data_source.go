// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/operations"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &PortalPageDataSource{}
var _ datasource.DataSourceWithConfigure = &PortalPageDataSource{}

func NewPortalPageDataSource() datasource.DataSource {
	return &PortalPageDataSource{}
}

// PortalPageDataSource is the data source implementation.
type PortalPageDataSource struct {
	client *sdk.SDK
}

// PortalPageDataSourceModel describes the data model.
type PortalPageDataSourceModel struct {
	AdditionalProperties types.String             `tfsdk:"additional_properties"`
	Blocks               map[string]tfTypes.Block `tfsdk:"blocks"`
	Content              map[string]types.String  `tfsdk:"content"`
	Design               map[string]types.String  `tfsdk:"design"`
	ID                   types.String             `tfsdk:"id"`
	IsDeleted            types.Bool               `tfsdk:"is_deleted"`
	IsEntryRoute         types.Bool               `tfsdk:"is_entry_route"`
	IsPublic             types.Bool               `tfsdk:"is_public"`
	IsSystem             types.Bool               `tfsdk:"is_system"`
	LastModifiedAt       types.String             `tfsdk:"last_modified_at"`
	Order                types.Number             `tfsdk:"order"`
	ParentID             types.String             `tfsdk:"parent_id"`
	Path                 types.String             `tfsdk:"path"`
	Schema               []types.String           `tfsdk:"schema"`
	Slug                 types.String             `tfsdk:"slug"`
	Visibility           map[string]types.String  `tfsdk:"visibility"`
}

// Metadata returns the data source type name.
func (r *PortalPageDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_page"
}

// Schema defines the schema for the data source.
func (r *PortalPageDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalPage DataSource",

		Attributes: map[string]schema.Attribute{
			"additional_properties": schema.StringAttribute{
				Computed:    true,
				Description: `Parsed as JSON.`,
			},
			"blocks": schema.MapNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"additional_properties": schema.StringAttribute{
							Computed:    true,
							Description: `Parsed as JSON.`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The id of the block`,
						},
						"order": schema.NumberAttribute{
							Computed:    true,
							Description: `The order of the block`,
						},
						"parent_id": schema.StringAttribute{
							Computed:    true,
							Description: `The id of the parent block`,
						},
						"props": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"additional_properties": schema.StringAttribute{
									Computed:    true,
									Description: `Parsed as JSON.`,
								},
								"content": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The content of the block`,
								},
								"design": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The design of the block`,
								},
								"visibility": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `The conditions that need to be met for the block to be shown`,
								},
							},
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Description: `The type of the block. eg; tabs, tab, group, attribute`,
						},
					},
				},
			},
			"content": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The content of the page`,
			},
			"design": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The design of the page`,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"is_deleted": schema.BoolAttribute{
				Computed:    true,
				Description: `Send the flag as true to delete the page`,
			},
			"is_entry_route": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the page is the entry route`,
			},
			"is_public": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the page is public`,
			},
			"is_system": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the page is a system page`,
			},
			"last_modified_at": schema.StringAttribute{
				Computed:    true,
				Description: `Last modified timestamp of the Page`,
			},
			"order": schema.NumberAttribute{
				Computed:    true,
				Description: `The order of the block`,
			},
			"parent_id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the parent page`,
			},
			"path": schema.StringAttribute{
				Computed:    true,
				Description: `The path of the page`,
			},
			"schema": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"slug": schema.StringAttribute{
				Computed:    true,
				Description: `The slug of the page`,
			},
			"visibility": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `The conditions that need to be met for the page to be shown`,
			},
		},
	}
}

func (r *PortalPageDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalPageDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *PortalPageDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetPortalPageRequest{
		ID: id,
	}
	res, err := r.client.ECPAdmin.GetPortalPage(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Page != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPage(res.Page)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
