// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PortalConfigResourceModel) RefreshFromSharedPortalConfigV3(ctx context.Context, resp *shared.PortalConfigV3) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessToken = types.StringPointerValue(resp.AccessToken)
		if resp.AdvancedMfa == nil {
			r.AdvancedMfa = nil
		} else {
			r.AdvancedMfa = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
			r.AdvancedMfa.Enabled = types.BoolPointerValue(resp.AdvancedMfa.Enabled)
		}
		if resp.AllowedFileExtensions == nil {
			r.AllowedFileExtensions = nil
		} else {
			r.AllowedFileExtensions = &tfTypes.AllowedFileExtensions{}
			r.AllowedFileExtensions.Archive = make([]types.String, 0, len(resp.AllowedFileExtensions.Archive))
			for _, v := range resp.AllowedFileExtensions.Archive {
				r.AllowedFileExtensions.Archive = append(r.AllowedFileExtensions.Archive, types.StringValue(v))
			}
			r.AllowedFileExtensions.AudioVideo = make([]types.String, 0, len(resp.AllowedFileExtensions.AudioVideo))
			for _, v := range resp.AllowedFileExtensions.AudioVideo {
				r.AllowedFileExtensions.AudioVideo = append(r.AllowedFileExtensions.AudioVideo, types.StringValue(v))
			}
			r.AllowedFileExtensions.Cad = make([]types.String, 0, len(resp.AllowedFileExtensions.Cad))
			for _, v := range resp.AllowedFileExtensions.Cad {
				r.AllowedFileExtensions.Cad = append(r.AllowedFileExtensions.Cad, types.StringValue(v))
			}
			r.AllowedFileExtensions.Calendar = make([]types.String, 0, len(resp.AllowedFileExtensions.Calendar))
			for _, v := range resp.AllowedFileExtensions.Calendar {
				r.AllowedFileExtensions.Calendar = append(r.AllowedFileExtensions.Calendar, types.StringValue(v))
			}
			r.AllowedFileExtensions.Document = make([]types.String, 0, len(resp.AllowedFileExtensions.Document))
			for _, v := range resp.AllowedFileExtensions.Document {
				r.AllowedFileExtensions.Document = append(r.AllowedFileExtensions.Document, types.StringValue(v))
			}
			r.AllowedFileExtensions.Email = make([]types.String, 0, len(resp.AllowedFileExtensions.Email))
			for _, v := range resp.AllowedFileExtensions.Email {
				r.AllowedFileExtensions.Email = append(r.AllowedFileExtensions.Email, types.StringValue(v))
			}
			r.AllowedFileExtensions.Image = make([]types.String, 0, len(resp.AllowedFileExtensions.Image))
			for _, v := range resp.AllowedFileExtensions.Image {
				r.AllowedFileExtensions.Image = append(r.AllowedFileExtensions.Image, types.StringValue(v))
			}
			r.AllowedFileExtensions.Other = make([]types.String, 0, len(resp.AllowedFileExtensions.Other))
			for _, v := range resp.AllowedFileExtensions.Other {
				r.AllowedFileExtensions.Other = append(r.AllowedFileExtensions.Other, types.StringValue(v))
			}
			r.AllowedFileExtensions.Presentation = make([]types.String, 0, len(resp.AllowedFileExtensions.Presentation))
			for _, v := range resp.AllowedFileExtensions.Presentation {
				r.AllowedFileExtensions.Presentation = append(r.AllowedFileExtensions.Presentation, types.StringValue(v))
			}
			r.AllowedFileExtensions.Spreadsheet = make([]types.String, 0, len(resp.AllowedFileExtensions.Spreadsheet))
			for _, v := range resp.AllowedFileExtensions.Spreadsheet {
				r.AllowedFileExtensions.Spreadsheet = append(r.AllowedFileExtensions.Spreadsheet, types.StringValue(v))
			}
		}
		if resp.ApprovalStateAttributes == nil {
			r.ApprovalStateAttributes = jsontypes.NewNormalizedNull()
		} else {
			approvalStateAttributesResult, _ := json.Marshal(resp.ApprovalStateAttributes)
			r.ApprovalStateAttributes = jsontypes.NewNormalizedValue(string(approvalStateAttributesResult))
		}
		if resp.AuthSettings == nil {
			r.AuthSettings = nil
		} else {
			r.AuthSettings = &tfTypes.UpsertPortalConfigV3AuthSettings{}
			r.AuthSettings.AutoRedirectToSso = types.BoolPointerValue(resp.AuthSettings.AutoRedirectToSso)
			if resp.AuthSettings.EntryPoint != nil {
				r.AuthSettings.EntryPoint = types.StringValue(string(*resp.AuthSettings.EntryPoint))
			} else {
				r.AuthSettings.EntryPoint = types.StringNull()
			}
			if resp.AuthSettings.PasswordlessLogin == nil {
				r.AuthSettings.PasswordlessLogin = nil
			} else {
				r.AuthSettings.PasswordlessLogin = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.AuthSettings.PasswordlessLogin.Enabled = types.BoolPointerValue(resp.AuthSettings.PasswordlessLogin.Enabled)
			}
			r.AuthSettings.PreferredSsoProviders = make([]types.String, 0, len(resp.AuthSettings.PreferredSsoProviders))
			for _, v := range resp.AuthSettings.PreferredSsoProviders {
				r.AuthSettings.PreferredSsoProviders = append(r.AuthSettings.PreferredSsoProviders, types.StringValue(v))
			}
		}
		if resp.CognitoDetails == nil {
			r.CognitoDetails = nil
		} else {
			r.CognitoDetails = &tfTypes.UpsertPortalConfigV3CognitoDetails{}
			r.CognitoDetails.CognitoUserPoolArn = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolArn)
			r.CognitoDetails.CognitoUserPoolClientID = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolClientID)
			r.CognitoDetails.CognitoUserPoolID = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolID)
			if resp.CognitoDetails.PasswordPolicy == nil {
				r.CognitoDetails.PasswordPolicy = nil
			} else {
				r.CognitoDetails.PasswordPolicy = &tfTypes.UpsertPortalConfigV3PasswordPolicy{}
				r.CognitoDetails.PasswordPolicy.MinimumLength = types.Int64PointerValue(resp.CognitoDetails.PasswordPolicy.MinimumLength)
				r.CognitoDetails.PasswordPolicy.RequireLowercase = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireLowercase)
				r.CognitoDetails.PasswordPolicy.RequireNumbers = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireNumbers)
				r.CognitoDetails.PasswordPolicy.RequireSymbols = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireSymbols)
				r.CognitoDetails.PasswordPolicy.RequireUppercase = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireUppercase)
			}
		}
		r.Config = types.StringPointerValue(resp.Config)
		r.ContactIdentifiers = make([]types.String, 0, len(resp.ContactIdentifiers))
		for _, v := range resp.ContactIdentifiers {
			r.ContactIdentifiers = append(r.ContactIdentifiers, types.StringValue(v))
		}
		if resp.ContractIdentifiers == nil {
			r.ContractIdentifiers = jsontypes.NewNormalizedNull()
		} else {
			contractIdentifiersResult, _ := json.Marshal(resp.ContractIdentifiers)
			r.ContractIdentifiers = jsontypes.NewNormalizedValue(string(contractIdentifiersResult))
		}
		if resp.ContractSelectorConfig == nil {
			r.ContractSelectorConfig = nil
		} else {
			r.ContractSelectorConfig = &tfTypes.UpsertPortalConfigV3ContractSelectorConfig{}
			r.ContractSelectorConfig.ShowInactive = types.BoolPointerValue(resp.ContractSelectorConfig.ShowInactive)
			r.ContractSelectorConfig.TitlePath = types.StringPointerValue(resp.ContractSelectorConfig.TitlePath)
		}
		if resp.DefaultUserToNotify == nil {
			r.DefaultUserToNotify = nil
		} else {
			r.DefaultUserToNotify = &tfTypes.UpsertPortalConfigV3DefaultUserToNotify{}
			r.DefaultUserToNotify.OnPendingUser = []tfTypes.AdminUser{}

			for _, onPendingUserItem := range resp.DefaultUserToNotify.OnPendingUser {
				var onPendingUser tfTypes.AdminUser

				if onPendingUserItem.AdditionalProperties == nil {
					onPendingUser.AdditionalProperties = jsontypes.NewNormalizedNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(onPendingUserItem.AdditionalProperties)
					onPendingUser.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult))
				}
				onPendingUser.DisplayName = types.StringPointerValue(onPendingUserItem.DisplayName)
				onPendingUser.Email = types.StringPointerValue(onPendingUserItem.Email)
				if onPendingUserItem.ImageURI == nil {
					onPendingUser.ImageURI = nil
				} else {
					onPendingUser.ImageURI = &tfTypes.ImageURI{}
					onPendingUser.ImageURI.Key = types.StringPointerValue(onPendingUserItem.ImageURI.Key)
					onPendingUser.ImageURI.Original = types.StringPointerValue(onPendingUserItem.ImageURI.Original)
					onPendingUser.ImageURI.Thumbnail32 = types.StringPointerValue(onPendingUserItem.ImageURI.Thumbnail32)
					onPendingUser.ImageURI.Thumbnail64 = types.StringPointerValue(onPendingUserItem.ImageURI.Thumbnail64)
				}
				onPendingUser.OrgID = types.StringPointerValue(onPendingUserItem.OrgID)
				onPendingUser.Phone = types.StringPointerValue(onPendingUserItem.Phone)
				onPendingUser.Type = types.StringPointerValue(onPendingUserItem.Type)
				onPendingUser.UserID = types.StringPointerValue(onPendingUserItem.UserID)

				r.DefaultUserToNotify.OnPendingUser = append(r.DefaultUserToNotify.OnPendingUser, onPendingUser)
			}
		}
		r.DesignID = types.StringPointerValue(resp.DesignID)
		r.Domain = types.StringPointerValue(resp.Domain)
		if resp.EmailTemplates == nil {
			r.EmailTemplates = nil
		} else {
			r.EmailTemplates = &tfTypes.EmailTemplates{}
			r.EmailTemplates.AdvancedAuth = types.StringPointerValue(resp.EmailTemplates.AdvancedAuth)
			r.EmailTemplates.AdvancedMFA = types.StringPointerValue(resp.EmailTemplates.AdvancedMFA)
			r.EmailTemplates.ConfirmAccount = types.StringPointerValue(resp.EmailTemplates.ConfirmAccount)
			r.EmailTemplates.ConfirmEmailUpdate = types.StringPointerValue(resp.EmailTemplates.ConfirmEmailUpdate)
			r.EmailTemplates.ForgotPassword = types.StringPointerValue(resp.EmailTemplates.ForgotPassword)
			r.EmailTemplates.Invitation = types.StringPointerValue(resp.EmailTemplates.Invitation)
			r.EmailTemplates.JourneyLoginOTP = types.StringPointerValue(resp.EmailTemplates.JourneyLoginOTP)
			r.EmailTemplates.JourneySignInOneTimePassword = types.StringPointerValue(resp.EmailTemplates.JourneySignInOneTimePassword)
			r.EmailTemplates.JourneySignUp = types.StringPointerValue(resp.EmailTemplates.JourneySignUp)
			r.EmailTemplates.OnDocUpload = types.StringPointerValue(resp.EmailTemplates.OnDocUpload)
			r.EmailTemplates.OnMapAPendingUser = types.StringPointerValue(resp.EmailTemplates.OnMapAPendingUser)
			r.EmailTemplates.OnNewQuote = types.StringPointerValue(resp.EmailTemplates.OnNewQuote)
			r.EmailTemplates.OnWorkflowStepAssigned = types.StringPointerValue(resp.EmailTemplates.OnWorkflowStepAssigned)
			r.EmailTemplates.VerifyCodeToSetPassword = types.StringPointerValue(resp.EmailTemplates.VerifyCodeToSetPassword)
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntityActions = []tfTypes.EntityActions{}

		for _, entityActionsItem := range resp.EntityActions {
			var entityActions tfTypes.EntityActions

			if entityActionsItem.ActionLabel == nil {
				entityActions.ActionLabel = nil
			} else {
				entityActions.ActionLabel = &tfTypes.UpsertPortalConfigV3ActionLabel{}
				entityActions.ActionLabel.De = types.StringPointerValue(entityActionsItem.ActionLabel.De)
				entityActions.ActionLabel.En = types.StringPointerValue(entityActionsItem.ActionLabel.En)
			}
			entityActions.JourneyID = types.StringPointerValue(entityActionsItem.JourneyID)
			if entityActionsItem.Slug != nil {
				entityActions.Slug = types.StringValue(string(*entityActionsItem.Slug))
			} else {
				entityActions.Slug = types.StringNull()
			}

			r.EntityActions = append(r.EntityActions, entityActions)
		}
		if resp.EntityEditRules == nil {
			r.EntityEditRules = jsontypes.NewNormalizedNull()
		} else {
			entityEditRulesResult, _ := json.Marshal(resp.EntityEditRules)
			r.EntityEditRules = jsontypes.NewNormalizedValue(string(entityEditRulesResult))
		}
		if resp.EntityIdentifiers == nil {
			r.EntityIdentifiers = nil
		} else {
			r.EntityIdentifiers = &tfTypes.UpsertPortalConfigV3EntityIdentifiers{}
			if resp.EntityIdentifiers.Type == nil {
				r.EntityIdentifiers.Type = nil
			} else {
				r.EntityIdentifiers.Type = &tfTypes.UpsertPortalConfigV3Type{}
				r.EntityIdentifiers.Type.Attributes = make([]types.String, 0, len(resp.EntityIdentifiers.Type.Attributes))
				for _, v := range resp.EntityIdentifiers.Type.Attributes {
					r.EntityIdentifiers.Type.Attributes = append(r.EntityIdentifiers.Type.Attributes, types.StringValue(v))
				}
				r.EntityIdentifiers.Type.IsEnabled = types.BoolPointerValue(resp.EntityIdentifiers.Type.IsEnabled)
			}
		}
		if len(resp.ExtensionHooks) > 0 {
			r.ExtensionHooks = make(map[string]tfTypes.ExtensionHookConfig, len(resp.ExtensionHooks))
			for extensionHookConfigKey, extensionHookConfigValue := range resp.ExtensionHooks {
				var extensionHookConfigResult tfTypes.ExtensionHookConfig
				extensionHookConfigResult.AppID = types.StringPointerValue(extensionHookConfigValue.AppID)
				extensionHookConfigResult.HookID = types.StringPointerValue(extensionHookConfigValue.HookID)

				r.ExtensionHooks[extensionHookConfigKey] = extensionHookConfigResult
			}
		}
		r.Extensions = []tfTypes.ExtensionConfig{}

		for _, extensionsItem := range resp.Extensions {
			var extensions tfTypes.ExtensionConfig

			extensions.ID = types.StringValue(extensionsItem.ID)
			if len(extensionsItem.Options) > 0 {
				extensions.Options = make(map[string]types.String, len(extensionsItem.Options))
				for key, value := range extensionsItem.Options {
					extensions.Options[key] = types.StringValue(value)
				}
			}
			if extensionsItem.Status != nil {
				extensions.Status = types.StringValue(string(*extensionsItem.Status))
			} else {
				extensions.Status = types.StringNull()
			}

			r.Extensions = append(r.Extensions, extensions)
		}
		if resp.FeatureFlags == nil {
			r.FeatureFlags = jsontypes.NewNormalizedNull()
		} else {
			featureFlagsResult, _ := json.Marshal(resp.FeatureFlags)
			r.FeatureFlags = jsontypes.NewNormalizedValue(string(featureFlagsResult))
		}
		if resp.FeatureSettings == nil {
			r.FeatureSettings = nil
		} else {
			r.FeatureSettings = &tfTypes.UpsertPortalConfigV3FeatureSettings{}
			r.FeatureSettings.Billing = types.BoolPointerValue(resp.FeatureSettings.Billing)
			r.FeatureSettings.ChangeDueDate = types.BoolPointerValue(resp.FeatureSettings.ChangeDueDate)
			r.FeatureSettings.NewDesign = types.BoolPointerValue(resp.FeatureSettings.NewDesign)
			r.FeatureSettings.StartPage = types.BoolPointerValue(resp.FeatureSettings.StartPage)
		}
		if resp.Grants == nil {
			r.Grants = jsontypes.NewNormalizedNull()
		} else {
			grantsResult, _ := json.Marshal(resp.Grants)
			r.Grants = jsontypes.NewNormalizedValue(string(grantsResult))
		}
		if resp.IdentityProviders == nil {
			r.IdentityProviders = jsontypes.NewNormalizedNull()
		} else {
			identityProvidersResult, _ := json.Marshal(resp.IdentityProviders)
			r.IdentityProviders = jsontypes.NewNormalizedValue(string(identityProvidersResult))
		}
		if resp.Images == nil {
			r.Images = nil
		} else {
			r.Images = &tfTypes.UpsertPortalConfigV3Images{}
			r.Images.OrderLeftTeaser = types.StringPointerValue(resp.Images.OrderLeftTeaser)
			r.Images.OrderRightTeaser = types.StringPointerValue(resp.Images.OrderRightTeaser)
			r.Images.WelcomeBanner = types.StringPointerValue(resp.Images.WelcomeBanner)
		}
		r.InactiveContractCutoffYears = types.Float64PointerValue(resp.InactiveContractCutoffYears)
		r.IsDummy = types.BoolPointerValue(resp.IsDummy)
		r.IsEpilotDomain = types.BoolPointerValue(resp.IsEpilotDomain)
		r.IsV3Item = types.BoolPointerValue(resp.IsV3Item)
		r.MeterReadingGracePeriod = types.Float64PointerValue(resp.MeterReadingGracePeriod)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.OrgSettings == nil {
			r.OrgSettings = nil
		} else {
			r.OrgSettings = &tfTypes.PortalConfigV3OrgSettings{}
			if resp.OrgSettings.Canary == nil {
				r.OrgSettings.Canary = nil
			} else {
				r.OrgSettings.Canary = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.OrgSettings.Canary.Enabled = types.BoolPointerValue(resp.OrgSettings.Canary.Enabled)
			}
			if resp.OrgSettings.Notracking == nil {
				r.OrgSettings.Notracking = nil
			} else {
				r.OrgSettings.Notracking = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.OrgSettings.Notracking.Enabled = types.BoolPointerValue(resp.OrgSettings.Notracking.Enabled)
			}
		}
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.Origin = types.StringPointerValue(resp.Origin)
		if resp.Pages == nil {
			r.Pages = jsontypes.NewNormalizedNull()
		} else {
			pagesResult, _ := json.Marshal(resp.Pages)
			r.Pages = jsontypes.NewNormalizedValue(string(pagesResult))
		}
		r.PortalID = types.StringPointerValue(resp.PortalID)
		r.PortalSkV3 = types.StringPointerValue(resp.PortalSkV3)
		r.PreventSearchEngineIndexing = types.BoolPointerValue(resp.PreventSearchEngineIndexing)
		if resp.RegistrationIdentifiers == nil {
			r.RegistrationIdentifiers = jsontypes.NewNormalizedNull()
		} else {
			registrationIdentifiersResult, _ := json.Marshal(resp.RegistrationIdentifiers)
			r.RegistrationIdentifiers = jsontypes.NewNormalizedValue(string(registrationIdentifiersResult))
		}
		if resp.SelfRegistrationSetting != nil {
			r.SelfRegistrationSetting = types.StringValue(string(*resp.SelfRegistrationSetting))
		} else {
			r.SelfRegistrationSetting = types.StringNull()
		}
		r.TriggeredJourneys = []tfTypes.PortalConfigV3TriggeredJourneys{}

		for _, triggeredJourneysItem := range resp.TriggeredJourneys {
			var triggeredJourneys tfTypes.PortalConfigV3TriggeredJourneys

			triggeredJourneys.JourneyID = types.StringPointerValue(triggeredJourneysItem.JourneyID)
			if triggeredJourneysItem.TriggerName != nil {
				triggeredJourneys.TriggerName = types.StringValue(string(*triggeredJourneysItem.TriggerName))
			} else {
				triggeredJourneys.TriggerName = types.StringNull()
			}

			r.TriggeredJourneys = append(r.TriggeredJourneys, triggeredJourneys)
		}
	}

	return diags
}

func (r *PortalConfigResourceModel) ToOperationsDeletePortalConfigRequest(ctx context.Context) (*operations.DeletePortalConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.DeletePortalConfigRequest{
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalConfigResourceModel) ToOperationsGetPortalConfigV3Request(ctx context.Context) (*operations.GetPortalConfigV3Request, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalConfigV3Request{
		PortalID: portalID,
	}

	return &out, diags
}

func (r *PortalConfigResourceModel) ToOperationsPutPortalConfigRequest(ctx context.Context) (*operations.PutPortalConfigRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	portalConfigV3, portalConfigV3Diags := r.ToSharedPortalConfigV3(ctx)
	diags.Append(portalConfigV3Diags...)

	if diags.HasError() {
		return nil, diags
	}

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.PutPortalConfigRequest{
		PortalConfigV3: *portalConfigV3,
		PortalID:       portalID,
	}

	return &out, diags
}

func (r *PortalConfigResourceModel) ToSharedPortalConfigV3(ctx context.Context) (*shared.PortalConfigV3, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessToken := new(string)
	if !r.AccessToken.IsUnknown() && !r.AccessToken.IsNull() {
		*accessToken = r.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	var advancedMfa *shared.PortalConfigV3AdvancedMfa
	if r.AdvancedMfa != nil {
		enabled := new(bool)
		if !r.AdvancedMfa.Enabled.IsUnknown() && !r.AdvancedMfa.Enabled.IsNull() {
			*enabled = r.AdvancedMfa.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		advancedMfa = &shared.PortalConfigV3AdvancedMfa{
			Enabled: enabled,
		}
	}
	var allowedFileExtensions *shared.AllowedFileExtensions
	if r.AllowedFileExtensions != nil {
		archive := make([]string, 0, len(r.AllowedFileExtensions.Archive))
		for _, archiveItem := range r.AllowedFileExtensions.Archive {
			archive = append(archive, archiveItem.ValueString())
		}
		audioVideo := make([]string, 0, len(r.AllowedFileExtensions.AudioVideo))
		for _, audioVideoItem := range r.AllowedFileExtensions.AudioVideo {
			audioVideo = append(audioVideo, audioVideoItem.ValueString())
		}
		cad := make([]string, 0, len(r.AllowedFileExtensions.Cad))
		for _, cadItem := range r.AllowedFileExtensions.Cad {
			cad = append(cad, cadItem.ValueString())
		}
		calendar := make([]string, 0, len(r.AllowedFileExtensions.Calendar))
		for _, calendarItem := range r.AllowedFileExtensions.Calendar {
			calendar = append(calendar, calendarItem.ValueString())
		}
		document := make([]string, 0, len(r.AllowedFileExtensions.Document))
		for _, documentItem := range r.AllowedFileExtensions.Document {
			document = append(document, documentItem.ValueString())
		}
		email := make([]string, 0, len(r.AllowedFileExtensions.Email))
		for _, emailItem := range r.AllowedFileExtensions.Email {
			email = append(email, emailItem.ValueString())
		}
		image := make([]string, 0, len(r.AllowedFileExtensions.Image))
		for _, imageItem := range r.AllowedFileExtensions.Image {
			image = append(image, imageItem.ValueString())
		}
		other := make([]string, 0, len(r.AllowedFileExtensions.Other))
		for _, otherItem := range r.AllowedFileExtensions.Other {
			other = append(other, otherItem.ValueString())
		}
		presentation := make([]string, 0, len(r.AllowedFileExtensions.Presentation))
		for _, presentationItem := range r.AllowedFileExtensions.Presentation {
			presentation = append(presentation, presentationItem.ValueString())
		}
		spreadsheet := make([]string, 0, len(r.AllowedFileExtensions.Spreadsheet))
		for _, spreadsheetItem := range r.AllowedFileExtensions.Spreadsheet {
			spreadsheet = append(spreadsheet, spreadsheetItem.ValueString())
		}
		allowedFileExtensions = &shared.AllowedFileExtensions{
			Archive:      archive,
			AudioVideo:   audioVideo,
			Cad:          cad,
			Calendar:     calendar,
			Document:     document,
			Email:        email,
			Image:        image,
			Other:        other,
			Presentation: presentation,
			Spreadsheet:  spreadsheet,
		}
	}
	var approvalStateAttributes interface{}
	if !r.ApprovalStateAttributes.IsUnknown() && !r.ApprovalStateAttributes.IsNull() {
		_ = json.Unmarshal([]byte(r.ApprovalStateAttributes.ValueString()), &approvalStateAttributes)
	}
	var authSettings *shared.PortalConfigV3AuthSettings
	if r.AuthSettings != nil {
		autoRedirectToSso := new(bool)
		if !r.AuthSettings.AutoRedirectToSso.IsUnknown() && !r.AuthSettings.AutoRedirectToSso.IsNull() {
			*autoRedirectToSso = r.AuthSettings.AutoRedirectToSso.ValueBool()
		} else {
			autoRedirectToSso = nil
		}
		entryPoint := new(shared.PortalConfigV3EntryPoint)
		if !r.AuthSettings.EntryPoint.IsUnknown() && !r.AuthSettings.EntryPoint.IsNull() {
			*entryPoint = shared.PortalConfigV3EntryPoint(r.AuthSettings.EntryPoint.ValueString())
		} else {
			entryPoint = nil
		}
		var passwordlessLogin *shared.PortalConfigV3PasswordlessLogin
		if r.AuthSettings.PasswordlessLogin != nil {
			enabled1 := new(bool)
			if !r.AuthSettings.PasswordlessLogin.Enabled.IsUnknown() && !r.AuthSettings.PasswordlessLogin.Enabled.IsNull() {
				*enabled1 = r.AuthSettings.PasswordlessLogin.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			passwordlessLogin = &shared.PortalConfigV3PasswordlessLogin{
				Enabled: enabled1,
			}
		}
		preferredSsoProviders := make([]string, 0, len(r.AuthSettings.PreferredSsoProviders))
		for _, preferredSsoProvidersItem := range r.AuthSettings.PreferredSsoProviders {
			preferredSsoProviders = append(preferredSsoProviders, preferredSsoProvidersItem.ValueString())
		}
		authSettings = &shared.PortalConfigV3AuthSettings{
			AutoRedirectToSso:     autoRedirectToSso,
			EntryPoint:            entryPoint,
			PasswordlessLogin:     passwordlessLogin,
			PreferredSsoProviders: preferredSsoProviders,
		}
	}
	var cognitoDetails *shared.PortalConfigV3CognitoDetails
	if r.CognitoDetails != nil {
		cognitoUserPoolArn := new(string)
		if !r.CognitoDetails.CognitoUserPoolArn.IsUnknown() && !r.CognitoDetails.CognitoUserPoolArn.IsNull() {
			*cognitoUserPoolArn = r.CognitoDetails.CognitoUserPoolArn.ValueString()
		} else {
			cognitoUserPoolArn = nil
		}
		cognitoUserPoolClientID := new(string)
		if !r.CognitoDetails.CognitoUserPoolClientID.IsUnknown() && !r.CognitoDetails.CognitoUserPoolClientID.IsNull() {
			*cognitoUserPoolClientID = r.CognitoDetails.CognitoUserPoolClientID.ValueString()
		} else {
			cognitoUserPoolClientID = nil
		}
		cognitoUserPoolID := new(string)
		if !r.CognitoDetails.CognitoUserPoolID.IsUnknown() && !r.CognitoDetails.CognitoUserPoolID.IsNull() {
			*cognitoUserPoolID = r.CognitoDetails.CognitoUserPoolID.ValueString()
		} else {
			cognitoUserPoolID = nil
		}
		var passwordPolicy *shared.PortalConfigV3PasswordPolicy
		if r.CognitoDetails.PasswordPolicy != nil {
			minimumLength := new(int64)
			if !r.CognitoDetails.PasswordPolicy.MinimumLength.IsUnknown() && !r.CognitoDetails.PasswordPolicy.MinimumLength.IsNull() {
				*minimumLength = r.CognitoDetails.PasswordPolicy.MinimumLength.ValueInt64()
			} else {
				minimumLength = nil
			}
			requireLowercase := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireLowercase.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireLowercase.IsNull() {
				*requireLowercase = r.CognitoDetails.PasswordPolicy.RequireLowercase.ValueBool()
			} else {
				requireLowercase = nil
			}
			requireNumbers := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireNumbers.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireNumbers.IsNull() {
				*requireNumbers = r.CognitoDetails.PasswordPolicy.RequireNumbers.ValueBool()
			} else {
				requireNumbers = nil
			}
			requireSymbols := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireSymbols.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireSymbols.IsNull() {
				*requireSymbols = r.CognitoDetails.PasswordPolicy.RequireSymbols.ValueBool()
			} else {
				requireSymbols = nil
			}
			requireUppercase := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireUppercase.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireUppercase.IsNull() {
				*requireUppercase = r.CognitoDetails.PasswordPolicy.RequireUppercase.ValueBool()
			} else {
				requireUppercase = nil
			}
			passwordPolicy = &shared.PortalConfigV3PasswordPolicy{
				MinimumLength:    minimumLength,
				RequireLowercase: requireLowercase,
				RequireNumbers:   requireNumbers,
				RequireSymbols:   requireSymbols,
				RequireUppercase: requireUppercase,
			}
		}
		cognitoDetails = &shared.PortalConfigV3CognitoDetails{
			CognitoUserPoolArn:      cognitoUserPoolArn,
			CognitoUserPoolClientID: cognitoUserPoolClientID,
			CognitoUserPoolID:       cognitoUserPoolID,
			PasswordPolicy:          passwordPolicy,
		}
	}
	config := new(string)
	if !r.Config.IsUnknown() && !r.Config.IsNull() {
		*config = r.Config.ValueString()
	} else {
		config = nil
	}
	contactIdentifiers := make([]string, 0, len(r.ContactIdentifiers))
	for _, contactIdentifiersItem := range r.ContactIdentifiers {
		contactIdentifiers = append(contactIdentifiers, contactIdentifiersItem.ValueString())
	}
	var contractIdentifiers interface{}
	if !r.ContractIdentifiers.IsUnknown() && !r.ContractIdentifiers.IsNull() {
		_ = json.Unmarshal([]byte(r.ContractIdentifiers.ValueString()), &contractIdentifiers)
	}
	var contractSelectorConfig *shared.PortalConfigV3ContractSelectorConfig
	if r.ContractSelectorConfig != nil {
		showInactive := new(bool)
		if !r.ContractSelectorConfig.ShowInactive.IsUnknown() && !r.ContractSelectorConfig.ShowInactive.IsNull() {
			*showInactive = r.ContractSelectorConfig.ShowInactive.ValueBool()
		} else {
			showInactive = nil
		}
		titlePath := new(string)
		if !r.ContractSelectorConfig.TitlePath.IsUnknown() && !r.ContractSelectorConfig.TitlePath.IsNull() {
			*titlePath = r.ContractSelectorConfig.TitlePath.ValueString()
		} else {
			titlePath = nil
		}
		contractSelectorConfig = &shared.PortalConfigV3ContractSelectorConfig{
			ShowInactive: showInactive,
			TitlePath:    titlePath,
		}
	}
	var defaultUserToNotify *shared.DefaultUserToNotify
	if r.DefaultUserToNotify != nil {
		onPendingUser := make([]shared.AdminUser, 0, len(r.DefaultUserToNotify.OnPendingUser))
		for _, onPendingUserItem := range r.DefaultUserToNotify.OnPendingUser {
			var additionalProperties interface{}
			if !onPendingUserItem.AdditionalProperties.IsUnknown() && !onPendingUserItem.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(onPendingUserItem.AdditionalProperties.ValueString()), &additionalProperties)
			}
			displayName := new(string)
			if !onPendingUserItem.DisplayName.IsUnknown() && !onPendingUserItem.DisplayName.IsNull() {
				*displayName = onPendingUserItem.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			email1 := new(string)
			if !onPendingUserItem.Email.IsUnknown() && !onPendingUserItem.Email.IsNull() {
				*email1 = onPendingUserItem.Email.ValueString()
			} else {
				email1 = nil
			}
			var imageURI *shared.ImageURI
			if onPendingUserItem.ImageURI != nil {
				key := new(string)
				if !onPendingUserItem.ImageURI.Key.IsUnknown() && !onPendingUserItem.ImageURI.Key.IsNull() {
					*key = onPendingUserItem.ImageURI.Key.ValueString()
				} else {
					key = nil
				}
				original := new(string)
				if !onPendingUserItem.ImageURI.Original.IsUnknown() && !onPendingUserItem.ImageURI.Original.IsNull() {
					*original = onPendingUserItem.ImageURI.Original.ValueString()
				} else {
					original = nil
				}
				thumbnail32 := new(string)
				if !onPendingUserItem.ImageURI.Thumbnail32.IsUnknown() && !onPendingUserItem.ImageURI.Thumbnail32.IsNull() {
					*thumbnail32 = onPendingUserItem.ImageURI.Thumbnail32.ValueString()
				} else {
					thumbnail32 = nil
				}
				thumbnail64 := new(string)
				if !onPendingUserItem.ImageURI.Thumbnail64.IsUnknown() && !onPendingUserItem.ImageURI.Thumbnail64.IsNull() {
					*thumbnail64 = onPendingUserItem.ImageURI.Thumbnail64.ValueString()
				} else {
					thumbnail64 = nil
				}
				imageURI = &shared.ImageURI{
					Key:         key,
					Original:    original,
					Thumbnail32: thumbnail32,
					Thumbnail64: thumbnail64,
				}
			}
			orgID := new(string)
			if !onPendingUserItem.OrgID.IsUnknown() && !onPendingUserItem.OrgID.IsNull() {
				*orgID = onPendingUserItem.OrgID.ValueString()
			} else {
				orgID = nil
			}
			phone := new(string)
			if !onPendingUserItem.Phone.IsUnknown() && !onPendingUserItem.Phone.IsNull() {
				*phone = onPendingUserItem.Phone.ValueString()
			} else {
				phone = nil
			}
			typeVar := new(string)
			if !onPendingUserItem.Type.IsUnknown() && !onPendingUserItem.Type.IsNull() {
				*typeVar = onPendingUserItem.Type.ValueString()
			} else {
				typeVar = nil
			}
			userID := new(string)
			if !onPendingUserItem.UserID.IsUnknown() && !onPendingUserItem.UserID.IsNull() {
				*userID = onPendingUserItem.UserID.ValueString()
			} else {
				userID = nil
			}
			onPendingUser = append(onPendingUser, shared.AdminUser{
				AdditionalProperties: additionalProperties,
				DisplayName:          displayName,
				Email:                email1,
				ImageURI:             imageURI,
				OrgID:                orgID,
				Phone:                phone,
				Type:                 typeVar,
				UserID:               userID,
			})
		}
		defaultUserToNotify = &shared.DefaultUserToNotify{
			OnPendingUser: onPendingUser,
		}
	}
	designID := new(string)
	if !r.DesignID.IsUnknown() && !r.DesignID.IsNull() {
		*designID = r.DesignID.ValueString()
	} else {
		designID = nil
	}
	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	var emailTemplates *shared.EmailTemplates
	if r.EmailTemplates != nil {
		advancedAuth := new(string)
		if !r.EmailTemplates.AdvancedAuth.IsUnknown() && !r.EmailTemplates.AdvancedAuth.IsNull() {
			*advancedAuth = r.EmailTemplates.AdvancedAuth.ValueString()
		} else {
			advancedAuth = nil
		}
		advancedMFA := new(string)
		if !r.EmailTemplates.AdvancedMFA.IsUnknown() && !r.EmailTemplates.AdvancedMFA.IsNull() {
			*advancedMFA = r.EmailTemplates.AdvancedMFA.ValueString()
		} else {
			advancedMFA = nil
		}
		confirmAccount := new(string)
		if !r.EmailTemplates.ConfirmAccount.IsUnknown() && !r.EmailTemplates.ConfirmAccount.IsNull() {
			*confirmAccount = r.EmailTemplates.ConfirmAccount.ValueString()
		} else {
			confirmAccount = nil
		}
		confirmEmailUpdate := new(string)
		if !r.EmailTemplates.ConfirmEmailUpdate.IsUnknown() && !r.EmailTemplates.ConfirmEmailUpdate.IsNull() {
			*confirmEmailUpdate = r.EmailTemplates.ConfirmEmailUpdate.ValueString()
		} else {
			confirmEmailUpdate = nil
		}
		forgotPassword := new(string)
		if !r.EmailTemplates.ForgotPassword.IsUnknown() && !r.EmailTemplates.ForgotPassword.IsNull() {
			*forgotPassword = r.EmailTemplates.ForgotPassword.ValueString()
		} else {
			forgotPassword = nil
		}
		invitation := new(string)
		if !r.EmailTemplates.Invitation.IsUnknown() && !r.EmailTemplates.Invitation.IsNull() {
			*invitation = r.EmailTemplates.Invitation.ValueString()
		} else {
			invitation = nil
		}
		journeyLoginOTP := new(string)
		if !r.EmailTemplates.JourneyLoginOTP.IsUnknown() && !r.EmailTemplates.JourneyLoginOTP.IsNull() {
			*journeyLoginOTP = r.EmailTemplates.JourneyLoginOTP.ValueString()
		} else {
			journeyLoginOTP = nil
		}
		journeySignInOneTimePassword := new(string)
		if !r.EmailTemplates.JourneySignInOneTimePassword.IsUnknown() && !r.EmailTemplates.JourneySignInOneTimePassword.IsNull() {
			*journeySignInOneTimePassword = r.EmailTemplates.JourneySignInOneTimePassword.ValueString()
		} else {
			journeySignInOneTimePassword = nil
		}
		journeySignUp := new(string)
		if !r.EmailTemplates.JourneySignUp.IsUnknown() && !r.EmailTemplates.JourneySignUp.IsNull() {
			*journeySignUp = r.EmailTemplates.JourneySignUp.ValueString()
		} else {
			journeySignUp = nil
		}
		onDocUpload := new(string)
		if !r.EmailTemplates.OnDocUpload.IsUnknown() && !r.EmailTemplates.OnDocUpload.IsNull() {
			*onDocUpload = r.EmailTemplates.OnDocUpload.ValueString()
		} else {
			onDocUpload = nil
		}
		onMapAPendingUser := new(string)
		if !r.EmailTemplates.OnMapAPendingUser.IsUnknown() && !r.EmailTemplates.OnMapAPendingUser.IsNull() {
			*onMapAPendingUser = r.EmailTemplates.OnMapAPendingUser.ValueString()
		} else {
			onMapAPendingUser = nil
		}
		onNewQuote := new(string)
		if !r.EmailTemplates.OnNewQuote.IsUnknown() && !r.EmailTemplates.OnNewQuote.IsNull() {
			*onNewQuote = r.EmailTemplates.OnNewQuote.ValueString()
		} else {
			onNewQuote = nil
		}
		onWorkflowStepAssigned := new(string)
		if !r.EmailTemplates.OnWorkflowStepAssigned.IsUnknown() && !r.EmailTemplates.OnWorkflowStepAssigned.IsNull() {
			*onWorkflowStepAssigned = r.EmailTemplates.OnWorkflowStepAssigned.ValueString()
		} else {
			onWorkflowStepAssigned = nil
		}
		verifyCodeToSetPassword := new(string)
		if !r.EmailTemplates.VerifyCodeToSetPassword.IsUnknown() && !r.EmailTemplates.VerifyCodeToSetPassword.IsNull() {
			*verifyCodeToSetPassword = r.EmailTemplates.VerifyCodeToSetPassword.ValueString()
		} else {
			verifyCodeToSetPassword = nil
		}
		emailTemplates = &shared.EmailTemplates{
			AdvancedAuth:                 advancedAuth,
			AdvancedMFA:                  advancedMFA,
			ConfirmAccount:               confirmAccount,
			ConfirmEmailUpdate:           confirmEmailUpdate,
			ForgotPassword:               forgotPassword,
			Invitation:                   invitation,
			JourneyLoginOTP:              journeyLoginOTP,
			JourneySignInOneTimePassword: journeySignInOneTimePassword,
			JourneySignUp:                journeySignUp,
			OnDocUpload:                  onDocUpload,
			OnMapAPendingUser:            onMapAPendingUser,
			OnNewQuote:                   onNewQuote,
			OnWorkflowStepAssigned:       onWorkflowStepAssigned,
			VerifyCodeToSetPassword:      verifyCodeToSetPassword,
		}
	}
	enabled2 := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled2 = r.Enabled.ValueBool()
	} else {
		enabled2 = nil
	}
	entityActions := make([]shared.EntityActions, 0, len(r.EntityActions))
	for _, entityActionsItem := range r.EntityActions {
		var actionLabel *shared.PortalConfigV3ActionLabel
		if entityActionsItem.ActionLabel != nil {
			de := new(string)
			if !entityActionsItem.ActionLabel.De.IsUnknown() && !entityActionsItem.ActionLabel.De.IsNull() {
				*de = entityActionsItem.ActionLabel.De.ValueString()
			} else {
				de = nil
			}
			en := new(string)
			if !entityActionsItem.ActionLabel.En.IsUnknown() && !entityActionsItem.ActionLabel.En.IsNull() {
				*en = entityActionsItem.ActionLabel.En.ValueString()
			} else {
				en = nil
			}
			actionLabel = &shared.PortalConfigV3ActionLabel{
				De: de,
				En: en,
			}
		}
		journeyID := new(string)
		if !entityActionsItem.JourneyID.IsUnknown() && !entityActionsItem.JourneyID.IsNull() {
			*journeyID = entityActionsItem.JourneyID.ValueString()
		} else {
			journeyID = nil
		}
		slug := new(shared.EntitySlug)
		if !entityActionsItem.Slug.IsUnknown() && !entityActionsItem.Slug.IsNull() {
			*slug = shared.EntitySlug(entityActionsItem.Slug.ValueString())
		} else {
			slug = nil
		}
		entityActions = append(entityActions, shared.EntityActions{
			ActionLabel: actionLabel,
			JourneyID:   journeyID,
			Slug:        slug,
		})
	}
	var entityEditRules interface{}
	if !r.EntityEditRules.IsUnknown() && !r.EntityEditRules.IsNull() {
		_ = json.Unmarshal([]byte(r.EntityEditRules.ValueString()), &entityEditRules)
	}
	var entityIdentifiers *shared.PortalConfigV3EntityIdentifiers
	if r.EntityIdentifiers != nil {
		var typeVar1 *shared.PortalConfigV3Type
		if r.EntityIdentifiers.Type != nil {
			attributes := make([]string, 0, len(r.EntityIdentifiers.Type.Attributes))
			for _, attributesItem := range r.EntityIdentifiers.Type.Attributes {
				attributes = append(attributes, attributesItem.ValueString())
			}
			isEnabled := new(bool)
			if !r.EntityIdentifiers.Type.IsEnabled.IsUnknown() && !r.EntityIdentifiers.Type.IsEnabled.IsNull() {
				*isEnabled = r.EntityIdentifiers.Type.IsEnabled.ValueBool()
			} else {
				isEnabled = nil
			}
			typeVar1 = &shared.PortalConfigV3Type{
				Attributes: attributes,
				IsEnabled:  isEnabled,
			}
		}
		entityIdentifiers = &shared.PortalConfigV3EntityIdentifiers{
			Type: typeVar1,
		}
	}
	extensionHooks := make(map[string]*shared.ExtensionHookConfig)
	for extensionHooksKey, extensionHooksValue := range r.ExtensionHooks {
		var extensionHooksInst *shared.ExtensionHookConfig
		appID := new(string)
		if !extensionHooksValue.AppID.IsUnknown() && !extensionHooksValue.AppID.IsNull() {
			*appID = extensionHooksValue.AppID.ValueString()
		} else {
			appID = nil
		}
		hookID := new(string)
		if !extensionHooksValue.HookID.IsUnknown() && !extensionHooksValue.HookID.IsNull() {
			*hookID = extensionHooksValue.HookID.ValueString()
		} else {
			hookID = nil
		}
		extensionHooksInst = &shared.ExtensionHookConfig{
			AppID:  appID,
			HookID: hookID,
		}
		extensionHooks[extensionHooksKey] = extensionHooksInst
	}
	extensions := make([]shared.ExtensionConfig, 0, len(r.Extensions))
	for _, extensionsItem := range r.Extensions {
		var id string
		id = extensionsItem.ID.ValueString()

		optionsVar := make(map[string]string)
		for optionsKey, optionsValue := range extensionsItem.Options {
			var optionsInst string
			optionsInst = optionsValue.ValueString()

			optionsVar[optionsKey] = optionsInst
		}
		status := new(shared.ExtensionConfigStatus)
		if !extensionsItem.Status.IsUnknown() && !extensionsItem.Status.IsNull() {
			*status = shared.ExtensionConfigStatus(extensionsItem.Status.ValueString())
		} else {
			status = nil
		}
		extensions = append(extensions, shared.ExtensionConfig{
			ID:      id,
			Options: optionsVar,
			Status:  status,
		})
	}
	var featureFlags interface{}
	if !r.FeatureFlags.IsUnknown() && !r.FeatureFlags.IsNull() {
		_ = json.Unmarshal([]byte(r.FeatureFlags.ValueString()), &featureFlags)
	}
	var featureSettings *shared.PortalConfigV3FeatureSettings
	if r.FeatureSettings != nil {
		billing := new(bool)
		if !r.FeatureSettings.Billing.IsUnknown() && !r.FeatureSettings.Billing.IsNull() {
			*billing = r.FeatureSettings.Billing.ValueBool()
		} else {
			billing = nil
		}
		changeDueDate := new(bool)
		if !r.FeatureSettings.ChangeDueDate.IsUnknown() && !r.FeatureSettings.ChangeDueDate.IsNull() {
			*changeDueDate = r.FeatureSettings.ChangeDueDate.ValueBool()
		} else {
			changeDueDate = nil
		}
		newDesign := new(bool)
		if !r.FeatureSettings.NewDesign.IsUnknown() && !r.FeatureSettings.NewDesign.IsNull() {
			*newDesign = r.FeatureSettings.NewDesign.ValueBool()
		} else {
			newDesign = nil
		}
		startPage := new(bool)
		if !r.FeatureSettings.StartPage.IsUnknown() && !r.FeatureSettings.StartPage.IsNull() {
			*startPage = r.FeatureSettings.StartPage.ValueBool()
		} else {
			startPage = nil
		}
		featureSettings = &shared.PortalConfigV3FeatureSettings{
			Billing:       billing,
			ChangeDueDate: changeDueDate,
			NewDesign:     newDesign,
			StartPage:     startPage,
		}
	}
	var grants interface{}
	if !r.Grants.IsUnknown() && !r.Grants.IsNull() {
		_ = json.Unmarshal([]byte(r.Grants.ValueString()), &grants)
	}
	var identityProviders interface{}
	if !r.IdentityProviders.IsUnknown() && !r.IdentityProviders.IsNull() {
		_ = json.Unmarshal([]byte(r.IdentityProviders.ValueString()), &identityProviders)
	}
	var images *shared.PortalConfigV3Images
	if r.Images != nil {
		orderLeftTeaser := new(string)
		if !r.Images.OrderLeftTeaser.IsUnknown() && !r.Images.OrderLeftTeaser.IsNull() {
			*orderLeftTeaser = r.Images.OrderLeftTeaser.ValueString()
		} else {
			orderLeftTeaser = nil
		}
		orderRightTeaser := new(string)
		if !r.Images.OrderRightTeaser.IsUnknown() && !r.Images.OrderRightTeaser.IsNull() {
			*orderRightTeaser = r.Images.OrderRightTeaser.ValueString()
		} else {
			orderRightTeaser = nil
		}
		welcomeBanner := new(string)
		if !r.Images.WelcomeBanner.IsUnknown() && !r.Images.WelcomeBanner.IsNull() {
			*welcomeBanner = r.Images.WelcomeBanner.ValueString()
		} else {
			welcomeBanner = nil
		}
		images = &shared.PortalConfigV3Images{
			OrderLeftTeaser:  orderLeftTeaser,
			OrderRightTeaser: orderRightTeaser,
			WelcomeBanner:    welcomeBanner,
		}
	}
	inactiveContractCutoffYears := new(float64)
	if !r.InactiveContractCutoffYears.IsUnknown() && !r.InactiveContractCutoffYears.IsNull() {
		*inactiveContractCutoffYears = r.InactiveContractCutoffYears.ValueFloat64()
	} else {
		inactiveContractCutoffYears = nil
	}
	isDummy := new(bool)
	if !r.IsDummy.IsUnknown() && !r.IsDummy.IsNull() {
		*isDummy = r.IsDummy.ValueBool()
	} else {
		isDummy = nil
	}
	isEpilotDomain := new(bool)
	if !r.IsEpilotDomain.IsUnknown() && !r.IsEpilotDomain.IsNull() {
		*isEpilotDomain = r.IsEpilotDomain.ValueBool()
	} else {
		isEpilotDomain = nil
	}
	isV3Item := new(bool)
	if !r.IsV3Item.IsUnknown() && !r.IsV3Item.IsNull() {
		*isV3Item = r.IsV3Item.ValueBool()
	} else {
		isV3Item = nil
	}
	meterReadingGracePeriod := new(float64)
	if !r.MeterReadingGracePeriod.IsUnknown() && !r.MeterReadingGracePeriod.IsNull() {
		*meterReadingGracePeriod = r.MeterReadingGracePeriod.ValueFloat64()
	} else {
		meterReadingGracePeriod = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	var orgSettings *shared.PortalConfigV3OrgSettings
	if r.OrgSettings != nil {
		var canary *shared.PortalConfigV3Canary
		if r.OrgSettings.Canary != nil {
			enabled3 := new(bool)
			if !r.OrgSettings.Canary.Enabled.IsUnknown() && !r.OrgSettings.Canary.Enabled.IsNull() {
				*enabled3 = r.OrgSettings.Canary.Enabled.ValueBool()
			} else {
				enabled3 = nil
			}
			canary = &shared.PortalConfigV3Canary{
				Enabled: enabled3,
			}
		}
		var notracking *shared.PortalConfigV3Notracking
		if r.OrgSettings.Notracking != nil {
			enabled4 := new(bool)
			if !r.OrgSettings.Notracking.Enabled.IsUnknown() && !r.OrgSettings.Notracking.Enabled.IsNull() {
				*enabled4 = r.OrgSettings.Notracking.Enabled.ValueBool()
			} else {
				enabled4 = nil
			}
			notracking = &shared.PortalConfigV3Notracking{
				Enabled: enabled4,
			}
		}
		orgSettings = &shared.PortalConfigV3OrgSettings{
			Canary:     canary,
			Notracking: notracking,
		}
	}
	organizationID := new(string)
	if !r.OrganizationID.IsUnknown() && !r.OrganizationID.IsNull() {
		*organizationID = r.OrganizationID.ValueString()
	} else {
		organizationID = nil
	}
	origin := new(string)
	if !r.Origin.IsUnknown() && !r.Origin.IsNull() {
		*origin = r.Origin.ValueString()
	} else {
		origin = nil
	}
	var pages interface{}
	if !r.Pages.IsUnknown() && !r.Pages.IsNull() {
		_ = json.Unmarshal([]byte(r.Pages.ValueString()), &pages)
	}
	portalID := new(string)
	if !r.PortalID.IsUnknown() && !r.PortalID.IsNull() {
		*portalID = r.PortalID.ValueString()
	} else {
		portalID = nil
	}
	portalSkV3 := new(string)
	if !r.PortalSkV3.IsUnknown() && !r.PortalSkV3.IsNull() {
		*portalSkV3 = r.PortalSkV3.ValueString()
	} else {
		portalSkV3 = nil
	}
	preventSearchEngineIndexing := new(bool)
	if !r.PreventSearchEngineIndexing.IsUnknown() && !r.PreventSearchEngineIndexing.IsNull() {
		*preventSearchEngineIndexing = r.PreventSearchEngineIndexing.ValueBool()
	} else {
		preventSearchEngineIndexing = nil
	}
	var registrationIdentifiers interface{}
	if !r.RegistrationIdentifiers.IsUnknown() && !r.RegistrationIdentifiers.IsNull() {
		_ = json.Unmarshal([]byte(r.RegistrationIdentifiers.ValueString()), &registrationIdentifiers)
	}
	selfRegistrationSetting := new(shared.PortalConfigV3SelfRegistrationSetting)
	if !r.SelfRegistrationSetting.IsUnknown() && !r.SelfRegistrationSetting.IsNull() {
		*selfRegistrationSetting = shared.PortalConfigV3SelfRegistrationSetting(r.SelfRegistrationSetting.ValueString())
	} else {
		selfRegistrationSetting = nil
	}
	triggeredJourneys := make([]shared.PortalConfigV3TriggeredJourneys, 0, len(r.TriggeredJourneys))
	for _, triggeredJourneysItem := range r.TriggeredJourneys {
		journeyId1 := new(string)
		if !triggeredJourneysItem.JourneyID.IsUnknown() && !triggeredJourneysItem.JourneyID.IsNull() {
			*journeyId1 = triggeredJourneysItem.JourneyID.ValueString()
		} else {
			journeyId1 = nil
		}
		triggerName := new(shared.PortalConfigV3TriggerName)
		if !triggeredJourneysItem.TriggerName.IsUnknown() && !triggeredJourneysItem.TriggerName.IsNull() {
			*triggerName = shared.PortalConfigV3TriggerName(triggeredJourneysItem.TriggerName.ValueString())
		} else {
			triggerName = nil
		}
		triggeredJourneys = append(triggeredJourneys, shared.PortalConfigV3TriggeredJourneys{
			JourneyID:   journeyId1,
			TriggerName: triggerName,
		})
	}
	out := shared.PortalConfigV3{
		AccessToken:                 accessToken,
		AdvancedMfa:                 advancedMfa,
		AllowedFileExtensions:       allowedFileExtensions,
		ApprovalStateAttributes:     approvalStateAttributes,
		AuthSettings:                authSettings,
		CognitoDetails:              cognitoDetails,
		Config:                      config,
		ContactIdentifiers:          contactIdentifiers,
		ContractIdentifiers:         contractIdentifiers,
		ContractSelectorConfig:      contractSelectorConfig,
		DefaultUserToNotify:         defaultUserToNotify,
		DesignID:                    designID,
		Domain:                      domain,
		EmailTemplates:              emailTemplates,
		Enabled:                     enabled2,
		EntityActions:               entityActions,
		EntityEditRules:             entityEditRules,
		EntityIdentifiers:           entityIdentifiers,
		ExtensionHooks:              extensionHooks,
		Extensions:                  extensions,
		FeatureFlags:                featureFlags,
		FeatureSettings:             featureSettings,
		Grants:                      grants,
		IdentityProviders:           identityProviders,
		Images:                      images,
		InactiveContractCutoffYears: inactiveContractCutoffYears,
		IsDummy:                     isDummy,
		IsEpilotDomain:              isEpilotDomain,
		IsV3Item:                    isV3Item,
		MeterReadingGracePeriod:     meterReadingGracePeriod,
		Name:                        name,
		OrgSettings:                 orgSettings,
		OrganizationID:              organizationID,
		Origin:                      origin,
		Pages:                       pages,
		PortalID:                    portalID,
		PortalSkV3:                  portalSkV3,
		PreventSearchEngineIndexing: preventSearchEngineIndexing,
		RegistrationIdentifiers:     registrationIdentifiers,
		SelfRegistrationSetting:     selfRegistrationSetting,
		TriggeredJourneys:           triggeredJourneys,
	}

	return &out, diags
}

func (r *PortalConfigResourceModel) ToSharedUpsertPortalConfigV3(ctx context.Context) (*shared.UpsertPortalConfigV3, diag.Diagnostics) {
	var diags diag.Diagnostics

	accessToken := new(string)
	if !r.AccessToken.IsUnknown() && !r.AccessToken.IsNull() {
		*accessToken = r.AccessToken.ValueString()
	} else {
		accessToken = nil
	}
	var advancedMfa *shared.UpsertPortalConfigV3AdvancedMfa
	if r.AdvancedMfa != nil {
		enabled := new(bool)
		if !r.AdvancedMfa.Enabled.IsUnknown() && !r.AdvancedMfa.Enabled.IsNull() {
			*enabled = r.AdvancedMfa.Enabled.ValueBool()
		} else {
			enabled = nil
		}
		advancedMfa = &shared.UpsertPortalConfigV3AdvancedMfa{
			Enabled: enabled,
		}
	}
	var allowedFileExtensions *shared.AllowedFileExtensions
	if r.AllowedFileExtensions != nil {
		archive := make([]string, 0, len(r.AllowedFileExtensions.Archive))
		for _, archiveItem := range r.AllowedFileExtensions.Archive {
			archive = append(archive, archiveItem.ValueString())
		}
		audioVideo := make([]string, 0, len(r.AllowedFileExtensions.AudioVideo))
		for _, audioVideoItem := range r.AllowedFileExtensions.AudioVideo {
			audioVideo = append(audioVideo, audioVideoItem.ValueString())
		}
		cad := make([]string, 0, len(r.AllowedFileExtensions.Cad))
		for _, cadItem := range r.AllowedFileExtensions.Cad {
			cad = append(cad, cadItem.ValueString())
		}
		calendar := make([]string, 0, len(r.AllowedFileExtensions.Calendar))
		for _, calendarItem := range r.AllowedFileExtensions.Calendar {
			calendar = append(calendar, calendarItem.ValueString())
		}
		document := make([]string, 0, len(r.AllowedFileExtensions.Document))
		for _, documentItem := range r.AllowedFileExtensions.Document {
			document = append(document, documentItem.ValueString())
		}
		email := make([]string, 0, len(r.AllowedFileExtensions.Email))
		for _, emailItem := range r.AllowedFileExtensions.Email {
			email = append(email, emailItem.ValueString())
		}
		image := make([]string, 0, len(r.AllowedFileExtensions.Image))
		for _, imageItem := range r.AllowedFileExtensions.Image {
			image = append(image, imageItem.ValueString())
		}
		other := make([]string, 0, len(r.AllowedFileExtensions.Other))
		for _, otherItem := range r.AllowedFileExtensions.Other {
			other = append(other, otherItem.ValueString())
		}
		presentation := make([]string, 0, len(r.AllowedFileExtensions.Presentation))
		for _, presentationItem := range r.AllowedFileExtensions.Presentation {
			presentation = append(presentation, presentationItem.ValueString())
		}
		spreadsheet := make([]string, 0, len(r.AllowedFileExtensions.Spreadsheet))
		for _, spreadsheetItem := range r.AllowedFileExtensions.Spreadsheet {
			spreadsheet = append(spreadsheet, spreadsheetItem.ValueString())
		}
		allowedFileExtensions = &shared.AllowedFileExtensions{
			Archive:      archive,
			AudioVideo:   audioVideo,
			Cad:          cad,
			Calendar:     calendar,
			Document:     document,
			Email:        email,
			Image:        image,
			Other:        other,
			Presentation: presentation,
			Spreadsheet:  spreadsheet,
		}
	}
	var approvalStateAttributes interface{}
	if !r.ApprovalStateAttributes.IsUnknown() && !r.ApprovalStateAttributes.IsNull() {
		_ = json.Unmarshal([]byte(r.ApprovalStateAttributes.ValueString()), &approvalStateAttributes)
	}
	var authSettings *shared.UpsertPortalConfigV3AuthSettings
	if r.AuthSettings != nil {
		autoRedirectToSso := new(bool)
		if !r.AuthSettings.AutoRedirectToSso.IsUnknown() && !r.AuthSettings.AutoRedirectToSso.IsNull() {
			*autoRedirectToSso = r.AuthSettings.AutoRedirectToSso.ValueBool()
		} else {
			autoRedirectToSso = nil
		}
		entryPoint := new(shared.UpsertPortalConfigV3EntryPoint)
		if !r.AuthSettings.EntryPoint.IsUnknown() && !r.AuthSettings.EntryPoint.IsNull() {
			*entryPoint = shared.UpsertPortalConfigV3EntryPoint(r.AuthSettings.EntryPoint.ValueString())
		} else {
			entryPoint = nil
		}
		var passwordlessLogin *shared.UpsertPortalConfigV3PasswordlessLogin
		if r.AuthSettings.PasswordlessLogin != nil {
			enabled1 := new(bool)
			if !r.AuthSettings.PasswordlessLogin.Enabled.IsUnknown() && !r.AuthSettings.PasswordlessLogin.Enabled.IsNull() {
				*enabled1 = r.AuthSettings.PasswordlessLogin.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			passwordlessLogin = &shared.UpsertPortalConfigV3PasswordlessLogin{
				Enabled: enabled1,
			}
		}
		preferredSsoProviders := make([]string, 0, len(r.AuthSettings.PreferredSsoProviders))
		for _, preferredSsoProvidersItem := range r.AuthSettings.PreferredSsoProviders {
			preferredSsoProviders = append(preferredSsoProviders, preferredSsoProvidersItem.ValueString())
		}
		authSettings = &shared.UpsertPortalConfigV3AuthSettings{
			AutoRedirectToSso:     autoRedirectToSso,
			EntryPoint:            entryPoint,
			PasswordlessLogin:     passwordlessLogin,
			PreferredSsoProviders: preferredSsoProviders,
		}
	}
	var cognitoDetails *shared.UpsertPortalConfigV3CognitoDetails
	if r.CognitoDetails != nil {
		cognitoUserPoolArn := new(string)
		if !r.CognitoDetails.CognitoUserPoolArn.IsUnknown() && !r.CognitoDetails.CognitoUserPoolArn.IsNull() {
			*cognitoUserPoolArn = r.CognitoDetails.CognitoUserPoolArn.ValueString()
		} else {
			cognitoUserPoolArn = nil
		}
		cognitoUserPoolClientID := new(string)
		if !r.CognitoDetails.CognitoUserPoolClientID.IsUnknown() && !r.CognitoDetails.CognitoUserPoolClientID.IsNull() {
			*cognitoUserPoolClientID = r.CognitoDetails.CognitoUserPoolClientID.ValueString()
		} else {
			cognitoUserPoolClientID = nil
		}
		cognitoUserPoolID := new(string)
		if !r.CognitoDetails.CognitoUserPoolID.IsUnknown() && !r.CognitoDetails.CognitoUserPoolID.IsNull() {
			*cognitoUserPoolID = r.CognitoDetails.CognitoUserPoolID.ValueString()
		} else {
			cognitoUserPoolID = nil
		}
		var passwordPolicy *shared.UpsertPortalConfigV3PasswordPolicy
		if r.CognitoDetails.PasswordPolicy != nil {
			minimumLength := new(int64)
			if !r.CognitoDetails.PasswordPolicy.MinimumLength.IsUnknown() && !r.CognitoDetails.PasswordPolicy.MinimumLength.IsNull() {
				*minimumLength = r.CognitoDetails.PasswordPolicy.MinimumLength.ValueInt64()
			} else {
				minimumLength = nil
			}
			requireLowercase := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireLowercase.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireLowercase.IsNull() {
				*requireLowercase = r.CognitoDetails.PasswordPolicy.RequireLowercase.ValueBool()
			} else {
				requireLowercase = nil
			}
			requireNumbers := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireNumbers.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireNumbers.IsNull() {
				*requireNumbers = r.CognitoDetails.PasswordPolicy.RequireNumbers.ValueBool()
			} else {
				requireNumbers = nil
			}
			requireSymbols := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireSymbols.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireSymbols.IsNull() {
				*requireSymbols = r.CognitoDetails.PasswordPolicy.RequireSymbols.ValueBool()
			} else {
				requireSymbols = nil
			}
			requireUppercase := new(bool)
			if !r.CognitoDetails.PasswordPolicy.RequireUppercase.IsUnknown() && !r.CognitoDetails.PasswordPolicy.RequireUppercase.IsNull() {
				*requireUppercase = r.CognitoDetails.PasswordPolicy.RequireUppercase.ValueBool()
			} else {
				requireUppercase = nil
			}
			passwordPolicy = &shared.UpsertPortalConfigV3PasswordPolicy{
				MinimumLength:    minimumLength,
				RequireLowercase: requireLowercase,
				RequireNumbers:   requireNumbers,
				RequireSymbols:   requireSymbols,
				RequireUppercase: requireUppercase,
			}
		}
		cognitoDetails = &shared.UpsertPortalConfigV3CognitoDetails{
			CognitoUserPoolArn:      cognitoUserPoolArn,
			CognitoUserPoolClientID: cognitoUserPoolClientID,
			CognitoUserPoolID:       cognitoUserPoolID,
			PasswordPolicy:          passwordPolicy,
		}
	}
	config := new(string)
	if !r.Config.IsUnknown() && !r.Config.IsNull() {
		*config = r.Config.ValueString()
	} else {
		config = nil
	}
	contactIdentifiers := make([]string, 0, len(r.ContactIdentifiers))
	for _, contactIdentifiersItem := range r.ContactIdentifiers {
		contactIdentifiers = append(contactIdentifiers, contactIdentifiersItem.ValueString())
	}
	var contractIdentifiers interface{}
	if !r.ContractIdentifiers.IsUnknown() && !r.ContractIdentifiers.IsNull() {
		_ = json.Unmarshal([]byte(r.ContractIdentifiers.ValueString()), &contractIdentifiers)
	}
	var contractSelectorConfig *shared.UpsertPortalConfigV3ContractSelectorConfig
	if r.ContractSelectorConfig != nil {
		showInactive := new(bool)
		if !r.ContractSelectorConfig.ShowInactive.IsUnknown() && !r.ContractSelectorConfig.ShowInactive.IsNull() {
			*showInactive = r.ContractSelectorConfig.ShowInactive.ValueBool()
		} else {
			showInactive = nil
		}
		titlePath := new(string)
		if !r.ContractSelectorConfig.TitlePath.IsUnknown() && !r.ContractSelectorConfig.TitlePath.IsNull() {
			*titlePath = r.ContractSelectorConfig.TitlePath.ValueString()
		} else {
			titlePath = nil
		}
		contractSelectorConfig = &shared.UpsertPortalConfigV3ContractSelectorConfig{
			ShowInactive: showInactive,
			TitlePath:    titlePath,
		}
	}
	var defaultUserToNotify *shared.UpsertPortalConfigV3DefaultUserToNotify
	if r.DefaultUserToNotify != nil {
		onPendingUser := make([]shared.AdminUser, 0, len(r.DefaultUserToNotify.OnPendingUser))
		for _, onPendingUserItem := range r.DefaultUserToNotify.OnPendingUser {
			var additionalProperties interface{}
			if !onPendingUserItem.AdditionalProperties.IsUnknown() && !onPendingUserItem.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(onPendingUserItem.AdditionalProperties.ValueString()), &additionalProperties)
			}
			displayName := new(string)
			if !onPendingUserItem.DisplayName.IsUnknown() && !onPendingUserItem.DisplayName.IsNull() {
				*displayName = onPendingUserItem.DisplayName.ValueString()
			} else {
				displayName = nil
			}
			email1 := new(string)
			if !onPendingUserItem.Email.IsUnknown() && !onPendingUserItem.Email.IsNull() {
				*email1 = onPendingUserItem.Email.ValueString()
			} else {
				email1 = nil
			}
			var imageURI *shared.ImageURI
			if onPendingUserItem.ImageURI != nil {
				key := new(string)
				if !onPendingUserItem.ImageURI.Key.IsUnknown() && !onPendingUserItem.ImageURI.Key.IsNull() {
					*key = onPendingUserItem.ImageURI.Key.ValueString()
				} else {
					key = nil
				}
				original := new(string)
				if !onPendingUserItem.ImageURI.Original.IsUnknown() && !onPendingUserItem.ImageURI.Original.IsNull() {
					*original = onPendingUserItem.ImageURI.Original.ValueString()
				} else {
					original = nil
				}
				thumbnail32 := new(string)
				if !onPendingUserItem.ImageURI.Thumbnail32.IsUnknown() && !onPendingUserItem.ImageURI.Thumbnail32.IsNull() {
					*thumbnail32 = onPendingUserItem.ImageURI.Thumbnail32.ValueString()
				} else {
					thumbnail32 = nil
				}
				thumbnail64 := new(string)
				if !onPendingUserItem.ImageURI.Thumbnail64.IsUnknown() && !onPendingUserItem.ImageURI.Thumbnail64.IsNull() {
					*thumbnail64 = onPendingUserItem.ImageURI.Thumbnail64.ValueString()
				} else {
					thumbnail64 = nil
				}
				imageURI = &shared.ImageURI{
					Key:         key,
					Original:    original,
					Thumbnail32: thumbnail32,
					Thumbnail64: thumbnail64,
				}
			}
			orgID := new(string)
			if !onPendingUserItem.OrgID.IsUnknown() && !onPendingUserItem.OrgID.IsNull() {
				*orgID = onPendingUserItem.OrgID.ValueString()
			} else {
				orgID = nil
			}
			phone := new(string)
			if !onPendingUserItem.Phone.IsUnknown() && !onPendingUserItem.Phone.IsNull() {
				*phone = onPendingUserItem.Phone.ValueString()
			} else {
				phone = nil
			}
			typeVar := new(string)
			if !onPendingUserItem.Type.IsUnknown() && !onPendingUserItem.Type.IsNull() {
				*typeVar = onPendingUserItem.Type.ValueString()
			} else {
				typeVar = nil
			}
			userID := new(string)
			if !onPendingUserItem.UserID.IsUnknown() && !onPendingUserItem.UserID.IsNull() {
				*userID = onPendingUserItem.UserID.ValueString()
			} else {
				userID = nil
			}
			onPendingUser = append(onPendingUser, shared.AdminUser{
				AdditionalProperties: additionalProperties,
				DisplayName:          displayName,
				Email:                email1,
				ImageURI:             imageURI,
				OrgID:                orgID,
				Phone:                phone,
				Type:                 typeVar,
				UserID:               userID,
			})
		}
		defaultUserToNotify = &shared.UpsertPortalConfigV3DefaultUserToNotify{
			OnPendingUser: onPendingUser,
		}
	}
	designID := new(string)
	if !r.DesignID.IsUnknown() && !r.DesignID.IsNull() {
		*designID = r.DesignID.ValueString()
	} else {
		designID = nil
	}
	domain := new(string)
	if !r.Domain.IsUnknown() && !r.Domain.IsNull() {
		*domain = r.Domain.ValueString()
	} else {
		domain = nil
	}
	var emailTemplates *shared.EmailTemplates
	if r.EmailTemplates != nil {
		advancedAuth := new(string)
		if !r.EmailTemplates.AdvancedAuth.IsUnknown() && !r.EmailTemplates.AdvancedAuth.IsNull() {
			*advancedAuth = r.EmailTemplates.AdvancedAuth.ValueString()
		} else {
			advancedAuth = nil
		}
		advancedMFA := new(string)
		if !r.EmailTemplates.AdvancedMFA.IsUnknown() && !r.EmailTemplates.AdvancedMFA.IsNull() {
			*advancedMFA = r.EmailTemplates.AdvancedMFA.ValueString()
		} else {
			advancedMFA = nil
		}
		confirmAccount := new(string)
		if !r.EmailTemplates.ConfirmAccount.IsUnknown() && !r.EmailTemplates.ConfirmAccount.IsNull() {
			*confirmAccount = r.EmailTemplates.ConfirmAccount.ValueString()
		} else {
			confirmAccount = nil
		}
		confirmEmailUpdate := new(string)
		if !r.EmailTemplates.ConfirmEmailUpdate.IsUnknown() && !r.EmailTemplates.ConfirmEmailUpdate.IsNull() {
			*confirmEmailUpdate = r.EmailTemplates.ConfirmEmailUpdate.ValueString()
		} else {
			confirmEmailUpdate = nil
		}
		forgotPassword := new(string)
		if !r.EmailTemplates.ForgotPassword.IsUnknown() && !r.EmailTemplates.ForgotPassword.IsNull() {
			*forgotPassword = r.EmailTemplates.ForgotPassword.ValueString()
		} else {
			forgotPassword = nil
		}
		invitation := new(string)
		if !r.EmailTemplates.Invitation.IsUnknown() && !r.EmailTemplates.Invitation.IsNull() {
			*invitation = r.EmailTemplates.Invitation.ValueString()
		} else {
			invitation = nil
		}
		journeyLoginOTP := new(string)
		if !r.EmailTemplates.JourneyLoginOTP.IsUnknown() && !r.EmailTemplates.JourneyLoginOTP.IsNull() {
			*journeyLoginOTP = r.EmailTemplates.JourneyLoginOTP.ValueString()
		} else {
			journeyLoginOTP = nil
		}
		journeySignInOneTimePassword := new(string)
		if !r.EmailTemplates.JourneySignInOneTimePassword.IsUnknown() && !r.EmailTemplates.JourneySignInOneTimePassword.IsNull() {
			*journeySignInOneTimePassword = r.EmailTemplates.JourneySignInOneTimePassword.ValueString()
		} else {
			journeySignInOneTimePassword = nil
		}
		journeySignUp := new(string)
		if !r.EmailTemplates.JourneySignUp.IsUnknown() && !r.EmailTemplates.JourneySignUp.IsNull() {
			*journeySignUp = r.EmailTemplates.JourneySignUp.ValueString()
		} else {
			journeySignUp = nil
		}
		onDocUpload := new(string)
		if !r.EmailTemplates.OnDocUpload.IsUnknown() && !r.EmailTemplates.OnDocUpload.IsNull() {
			*onDocUpload = r.EmailTemplates.OnDocUpload.ValueString()
		} else {
			onDocUpload = nil
		}
		onMapAPendingUser := new(string)
		if !r.EmailTemplates.OnMapAPendingUser.IsUnknown() && !r.EmailTemplates.OnMapAPendingUser.IsNull() {
			*onMapAPendingUser = r.EmailTemplates.OnMapAPendingUser.ValueString()
		} else {
			onMapAPendingUser = nil
		}
		onNewQuote := new(string)
		if !r.EmailTemplates.OnNewQuote.IsUnknown() && !r.EmailTemplates.OnNewQuote.IsNull() {
			*onNewQuote = r.EmailTemplates.OnNewQuote.ValueString()
		} else {
			onNewQuote = nil
		}
		onWorkflowStepAssigned := new(string)
		if !r.EmailTemplates.OnWorkflowStepAssigned.IsUnknown() && !r.EmailTemplates.OnWorkflowStepAssigned.IsNull() {
			*onWorkflowStepAssigned = r.EmailTemplates.OnWorkflowStepAssigned.ValueString()
		} else {
			onWorkflowStepAssigned = nil
		}
		verifyCodeToSetPassword := new(string)
		if !r.EmailTemplates.VerifyCodeToSetPassword.IsUnknown() && !r.EmailTemplates.VerifyCodeToSetPassword.IsNull() {
			*verifyCodeToSetPassword = r.EmailTemplates.VerifyCodeToSetPassword.ValueString()
		} else {
			verifyCodeToSetPassword = nil
		}
		emailTemplates = &shared.EmailTemplates{
			AdvancedAuth:                 advancedAuth,
			AdvancedMFA:                  advancedMFA,
			ConfirmAccount:               confirmAccount,
			ConfirmEmailUpdate:           confirmEmailUpdate,
			ForgotPassword:               forgotPassword,
			Invitation:                   invitation,
			JourneyLoginOTP:              journeyLoginOTP,
			JourneySignInOneTimePassword: journeySignInOneTimePassword,
			JourneySignUp:                journeySignUp,
			OnDocUpload:                  onDocUpload,
			OnMapAPendingUser:            onMapAPendingUser,
			OnNewQuote:                   onNewQuote,
			OnWorkflowStepAssigned:       onWorkflowStepAssigned,
			VerifyCodeToSetPassword:      verifyCodeToSetPassword,
		}
	}
	enabled2 := new(bool)
	if !r.Enabled.IsUnknown() && !r.Enabled.IsNull() {
		*enabled2 = r.Enabled.ValueBool()
	} else {
		enabled2 = nil
	}
	entityActions := make([]shared.UpsertPortalConfigV3EntityActions, 0, len(r.EntityActions))
	for _, entityActionsItem := range r.EntityActions {
		var actionLabel *shared.UpsertPortalConfigV3ActionLabel
		if entityActionsItem.ActionLabel != nil {
			de := new(string)
			if !entityActionsItem.ActionLabel.De.IsUnknown() && !entityActionsItem.ActionLabel.De.IsNull() {
				*de = entityActionsItem.ActionLabel.De.ValueString()
			} else {
				de = nil
			}
			en := new(string)
			if !entityActionsItem.ActionLabel.En.IsUnknown() && !entityActionsItem.ActionLabel.En.IsNull() {
				*en = entityActionsItem.ActionLabel.En.ValueString()
			} else {
				en = nil
			}
			actionLabel = &shared.UpsertPortalConfigV3ActionLabel{
				De: de,
				En: en,
			}
		}
		journeyID := new(string)
		if !entityActionsItem.JourneyID.IsUnknown() && !entityActionsItem.JourneyID.IsNull() {
			*journeyID = entityActionsItem.JourneyID.ValueString()
		} else {
			journeyID = nil
		}
		slug := new(shared.EntitySlug)
		if !entityActionsItem.Slug.IsUnknown() && !entityActionsItem.Slug.IsNull() {
			*slug = shared.EntitySlug(entityActionsItem.Slug.ValueString())
		} else {
			slug = nil
		}
		entityActions = append(entityActions, shared.UpsertPortalConfigV3EntityActions{
			ActionLabel: actionLabel,
			JourneyID:   journeyID,
			Slug:        slug,
		})
	}
	var entityEditRules interface{}
	if !r.EntityEditRules.IsUnknown() && !r.EntityEditRules.IsNull() {
		_ = json.Unmarshal([]byte(r.EntityEditRules.ValueString()), &entityEditRules)
	}
	var entityIdentifiers *shared.UpsertPortalConfigV3EntityIdentifiers
	if r.EntityIdentifiers != nil {
		var typeVar1 *shared.UpsertPortalConfigV3Type
		if r.EntityIdentifiers.Type != nil {
			attributes := make([]string, 0, len(r.EntityIdentifiers.Type.Attributes))
			for _, attributesItem := range r.EntityIdentifiers.Type.Attributes {
				attributes = append(attributes, attributesItem.ValueString())
			}
			isEnabled := new(bool)
			if !r.EntityIdentifiers.Type.IsEnabled.IsUnknown() && !r.EntityIdentifiers.Type.IsEnabled.IsNull() {
				*isEnabled = r.EntityIdentifiers.Type.IsEnabled.ValueBool()
			} else {
				isEnabled = nil
			}
			typeVar1 = &shared.UpsertPortalConfigV3Type{
				Attributes: attributes,
				IsEnabled:  isEnabled,
			}
		}
		entityIdentifiers = &shared.UpsertPortalConfigV3EntityIdentifiers{
			Type: typeVar1,
		}
	}
	extensionHooks := make(map[string]*shared.ExtensionHookConfig)
	for extensionHooksKey, extensionHooksValue := range r.ExtensionHooks {
		var extensionHooksInst *shared.ExtensionHookConfig
		appID := new(string)
		if !extensionHooksValue.AppID.IsUnknown() && !extensionHooksValue.AppID.IsNull() {
			*appID = extensionHooksValue.AppID.ValueString()
		} else {
			appID = nil
		}
		hookID := new(string)
		if !extensionHooksValue.HookID.IsUnknown() && !extensionHooksValue.HookID.IsNull() {
			*hookID = extensionHooksValue.HookID.ValueString()
		} else {
			hookID = nil
		}
		extensionHooksInst = &shared.ExtensionHookConfig{
			AppID:  appID,
			HookID: hookID,
		}
		extensionHooks[extensionHooksKey] = extensionHooksInst
	}
	extensions := make([]shared.ExtensionConfig, 0, len(r.Extensions))
	for _, extensionsItem := range r.Extensions {
		var id string
		id = extensionsItem.ID.ValueString()

		optionsVar := make(map[string]string)
		for optionsKey, optionsValue := range extensionsItem.Options {
			var optionsInst string
			optionsInst = optionsValue.ValueString()

			optionsVar[optionsKey] = optionsInst
		}
		status := new(shared.ExtensionConfigStatus)
		if !extensionsItem.Status.IsUnknown() && !extensionsItem.Status.IsNull() {
			*status = shared.ExtensionConfigStatus(extensionsItem.Status.ValueString())
		} else {
			status = nil
		}
		extensions = append(extensions, shared.ExtensionConfig{
			ID:      id,
			Options: optionsVar,
			Status:  status,
		})
	}
	var featureSettings *shared.UpsertPortalConfigV3FeatureSettings
	if r.FeatureSettings != nil {
		billing := new(bool)
		if !r.FeatureSettings.Billing.IsUnknown() && !r.FeatureSettings.Billing.IsNull() {
			*billing = r.FeatureSettings.Billing.ValueBool()
		} else {
			billing = nil
		}
		changeDueDate := new(bool)
		if !r.FeatureSettings.ChangeDueDate.IsUnknown() && !r.FeatureSettings.ChangeDueDate.IsNull() {
			*changeDueDate = r.FeatureSettings.ChangeDueDate.ValueBool()
		} else {
			changeDueDate = nil
		}
		newDesign := new(bool)
		if !r.FeatureSettings.NewDesign.IsUnknown() && !r.FeatureSettings.NewDesign.IsNull() {
			*newDesign = r.FeatureSettings.NewDesign.ValueBool()
		} else {
			newDesign = nil
		}
		startPage := new(bool)
		if !r.FeatureSettings.StartPage.IsUnknown() && !r.FeatureSettings.StartPage.IsNull() {
			*startPage = r.FeatureSettings.StartPage.ValueBool()
		} else {
			startPage = nil
		}
		featureSettings = &shared.UpsertPortalConfigV3FeatureSettings{
			Billing:       billing,
			ChangeDueDate: changeDueDate,
			NewDesign:     newDesign,
			StartPage:     startPage,
		}
	}
	var images *shared.UpsertPortalConfigV3Images
	if r.Images != nil {
		orderLeftTeaser := new(string)
		if !r.Images.OrderLeftTeaser.IsUnknown() && !r.Images.OrderLeftTeaser.IsNull() {
			*orderLeftTeaser = r.Images.OrderLeftTeaser.ValueString()
		} else {
			orderLeftTeaser = nil
		}
		orderRightTeaser := new(string)
		if !r.Images.OrderRightTeaser.IsUnknown() && !r.Images.OrderRightTeaser.IsNull() {
			*orderRightTeaser = r.Images.OrderRightTeaser.ValueString()
		} else {
			orderRightTeaser = nil
		}
		welcomeBanner := new(string)
		if !r.Images.WelcomeBanner.IsUnknown() && !r.Images.WelcomeBanner.IsNull() {
			*welcomeBanner = r.Images.WelcomeBanner.ValueString()
		} else {
			welcomeBanner = nil
		}
		images = &shared.UpsertPortalConfigV3Images{
			OrderLeftTeaser:  orderLeftTeaser,
			OrderRightTeaser: orderRightTeaser,
			WelcomeBanner:    welcomeBanner,
		}
	}
	inactiveContractCutoffYears := new(float64)
	if !r.InactiveContractCutoffYears.IsUnknown() && !r.InactiveContractCutoffYears.IsNull() {
		*inactiveContractCutoffYears = r.InactiveContractCutoffYears.ValueFloat64()
	} else {
		inactiveContractCutoffYears = nil
	}
	isDummy := new(bool)
	if !r.IsDummy.IsUnknown() && !r.IsDummy.IsNull() {
		*isDummy = r.IsDummy.ValueBool()
	} else {
		isDummy = nil
	}
	isEpilotDomain := new(bool)
	if !r.IsEpilotDomain.IsUnknown() && !r.IsEpilotDomain.IsNull() {
		*isEpilotDomain = r.IsEpilotDomain.ValueBool()
	} else {
		isEpilotDomain = nil
	}
	isV3Item := new(bool)
	if !r.IsV3Item.IsUnknown() && !r.IsV3Item.IsNull() {
		*isV3Item = r.IsV3Item.ValueBool()
	} else {
		isV3Item = nil
	}
	meterReadingGracePeriod := new(float64)
	if !r.MeterReadingGracePeriod.IsUnknown() && !r.MeterReadingGracePeriod.IsNull() {
		*meterReadingGracePeriod = r.MeterReadingGracePeriod.ValueFloat64()
	} else {
		meterReadingGracePeriod = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	origin := new(string)
	if !r.Origin.IsUnknown() && !r.Origin.IsNull() {
		*origin = r.Origin.ValueString()
	} else {
		origin = nil
	}
	var pages interface{}
	if !r.Pages.IsUnknown() && !r.Pages.IsNull() {
		_ = json.Unmarshal([]byte(r.Pages.ValueString()), &pages)
	}
	portalID := new(string)
	if !r.PortalID.IsUnknown() && !r.PortalID.IsNull() {
		*portalID = r.PortalID.ValueString()
	} else {
		portalID = nil
	}
	portalSkV3 := new(string)
	if !r.PortalSkV3.IsUnknown() && !r.PortalSkV3.IsNull() {
		*portalSkV3 = r.PortalSkV3.ValueString()
	} else {
		portalSkV3 = nil
	}
	preventSearchEngineIndexing := new(bool)
	if !r.PreventSearchEngineIndexing.IsUnknown() && !r.PreventSearchEngineIndexing.IsNull() {
		*preventSearchEngineIndexing = r.PreventSearchEngineIndexing.ValueBool()
	} else {
		preventSearchEngineIndexing = nil
	}
	var registrationIdentifiers interface{}
	if !r.RegistrationIdentifiers.IsUnknown() && !r.RegistrationIdentifiers.IsNull() {
		_ = json.Unmarshal([]byte(r.RegistrationIdentifiers.ValueString()), &registrationIdentifiers)
	}
	selfRegistrationSetting := new(shared.UpsertPortalConfigV3SelfRegistrationSetting)
	if !r.SelfRegistrationSetting.IsUnknown() && !r.SelfRegistrationSetting.IsNull() {
		*selfRegistrationSetting = shared.UpsertPortalConfigV3SelfRegistrationSetting(r.SelfRegistrationSetting.ValueString())
	} else {
		selfRegistrationSetting = nil
	}
	triggeredJourneys := make([]shared.UpsertPortalConfigV3TriggeredJourneys, 0, len(r.TriggeredJourneys))
	for _, triggeredJourneysItem := range r.TriggeredJourneys {
		journeyId1 := new(string)
		if !triggeredJourneysItem.JourneyID.IsUnknown() && !triggeredJourneysItem.JourneyID.IsNull() {
			*journeyId1 = triggeredJourneysItem.JourneyID.ValueString()
		} else {
			journeyId1 = nil
		}
		triggerName := new(shared.UpsertPortalConfigV3TriggerName)
		if !triggeredJourneysItem.TriggerName.IsUnknown() && !triggeredJourneysItem.TriggerName.IsNull() {
			*triggerName = shared.UpsertPortalConfigV3TriggerName(triggeredJourneysItem.TriggerName.ValueString())
		} else {
			triggerName = nil
		}
		triggeredJourneys = append(triggeredJourneys, shared.UpsertPortalConfigV3TriggeredJourneys{
			JourneyID:   journeyId1,
			TriggerName: triggerName,
		})
	}
	out := shared.UpsertPortalConfigV3{
		AccessToken:                 accessToken,
		AdvancedMfa:                 advancedMfa,
		AllowedFileExtensions:       allowedFileExtensions,
		ApprovalStateAttributes:     approvalStateAttributes,
		AuthSettings:                authSettings,
		CognitoDetails:              cognitoDetails,
		Config:                      config,
		ContactIdentifiers:          contactIdentifiers,
		ContractIdentifiers:         contractIdentifiers,
		ContractSelectorConfig:      contractSelectorConfig,
		DefaultUserToNotify:         defaultUserToNotify,
		DesignID:                    designID,
		Domain:                      domain,
		EmailTemplates:              emailTemplates,
		Enabled:                     enabled2,
		EntityActions:               entityActions,
		EntityEditRules:             entityEditRules,
		EntityIdentifiers:           entityIdentifiers,
		ExtensionHooks:              extensionHooks,
		Extensions:                  extensions,
		FeatureSettings:             featureSettings,
		Images:                      images,
		InactiveContractCutoffYears: inactiveContractCutoffYears,
		IsDummy:                     isDummy,
		IsEpilotDomain:              isEpilotDomain,
		IsV3Item:                    isV3Item,
		MeterReadingGracePeriod:     meterReadingGracePeriod,
		Name:                        name,
		Origin:                      origin,
		Pages:                       pages,
		PortalID:                    portalID,
		PortalSkV3:                  portalSkV3,
		PreventSearchEngineIndexing: preventSearchEngineIndexing,
		RegistrationIdentifiers:     registrationIdentifiers,
		SelfRegistrationSetting:     selfRegistrationSetting,
		TriggeredJourneys:           triggeredJourneys,
	}

	return &out, diags
}
