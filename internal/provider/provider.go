// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
)

var _ provider.Provider = &EpilotPortalProvider{}

type EpilotPortalProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// EpilotPortalProviderModel describes the provider data model.
type EpilotPortalProviderModel struct {
	ServerURL  types.String `tfsdk:"server_url"`
	EitherAuth types.String `tfsdk:"either_auth"`
	EpilotAuth types.String `tfsdk:"epilot_auth"`
	PortalAuth types.String `tfsdk:"portal_auth"`
}

func (p *EpilotPortalProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "epilot-portal"
	resp.Version = p.version
}

func (p *EpilotPortalProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: `Portal API: Backend for epilot portals - End Customer Portal & Installer Portal`,
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to https://customer-portal-api.sls.epilot.io)",
				Optional:            true,
				Required:            false,
			},
			"either_auth": schema.StringAttribute{
				Sensitive: true,
				Optional:  true,
			},
			"epilot_auth": schema.StringAttribute{
				Sensitive: true,
				Optional:  true,
			},
			"portal_auth": schema.StringAttribute{
				Sensitive: true,
				Optional:  true,
			},
		},
	}
}

func (p *EpilotPortalProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data EpilotPortalProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://customer-portal-api.sls.epilot.io"
	}

	eitherAuth := new(string)
	if !data.EitherAuth.IsUnknown() && !data.EitherAuth.IsNull() {
		*eitherAuth = data.EitherAuth.ValueString()
	} else {
		eitherAuth = nil
	}
	epilotAuth := new(string)
	if !data.EpilotAuth.IsUnknown() && !data.EpilotAuth.IsNull() {
		*epilotAuth = data.EpilotAuth.ValueString()
	} else {
		epilotAuth = nil
	}
	portalAuth := new(string)
	if !data.PortalAuth.IsUnknown() && !data.PortalAuth.IsNull() {
		*portalAuth = data.PortalAuth.ValueString()
	} else {
		portalAuth = nil
	}
	security := shared.Security{
		EitherAuth: eitherAuth,
		EpilotAuth: epilotAuth,
		PortalAuth: portalAuth,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewLoggingHTTPTransport(http.DefaultTransport)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *EpilotPortalProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewPortalConfigResource,
		NewPortalPageResource,
	}
}

func (p *EpilotPortalProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &EpilotPortalProvider{
			version: version,
		}
	}
}
