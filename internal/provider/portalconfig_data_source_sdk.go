// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *PortalConfigDataSourceModel) RefreshFromSharedPortalConfigV3(ctx context.Context, resp *shared.PortalConfigV3) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AccessToken = types.StringPointerValue(resp.AccessToken)
		if resp.AdvancedMfa == nil {
			r.AdvancedMfa = nil
		} else {
			r.AdvancedMfa = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
			r.AdvancedMfa.Enabled = types.BoolPointerValue(resp.AdvancedMfa.Enabled)
		}
		if resp.AllowedFileExtensions == nil {
			r.AllowedFileExtensions = nil
		} else {
			r.AllowedFileExtensions = &tfTypes.AllowedFileExtensions{}
			r.AllowedFileExtensions.Archive = make([]types.String, 0, len(resp.AllowedFileExtensions.Archive))
			for _, v := range resp.AllowedFileExtensions.Archive {
				r.AllowedFileExtensions.Archive = append(r.AllowedFileExtensions.Archive, types.StringValue(v))
			}
			r.AllowedFileExtensions.AudioVideo = make([]types.String, 0, len(resp.AllowedFileExtensions.AudioVideo))
			for _, v := range resp.AllowedFileExtensions.AudioVideo {
				r.AllowedFileExtensions.AudioVideo = append(r.AllowedFileExtensions.AudioVideo, types.StringValue(v))
			}
			r.AllowedFileExtensions.Cad = make([]types.String, 0, len(resp.AllowedFileExtensions.Cad))
			for _, v := range resp.AllowedFileExtensions.Cad {
				r.AllowedFileExtensions.Cad = append(r.AllowedFileExtensions.Cad, types.StringValue(v))
			}
			r.AllowedFileExtensions.Calendar = make([]types.String, 0, len(resp.AllowedFileExtensions.Calendar))
			for _, v := range resp.AllowedFileExtensions.Calendar {
				r.AllowedFileExtensions.Calendar = append(r.AllowedFileExtensions.Calendar, types.StringValue(v))
			}
			r.AllowedFileExtensions.Document = make([]types.String, 0, len(resp.AllowedFileExtensions.Document))
			for _, v := range resp.AllowedFileExtensions.Document {
				r.AllowedFileExtensions.Document = append(r.AllowedFileExtensions.Document, types.StringValue(v))
			}
			r.AllowedFileExtensions.Email = make([]types.String, 0, len(resp.AllowedFileExtensions.Email))
			for _, v := range resp.AllowedFileExtensions.Email {
				r.AllowedFileExtensions.Email = append(r.AllowedFileExtensions.Email, types.StringValue(v))
			}
			r.AllowedFileExtensions.Image = make([]types.String, 0, len(resp.AllowedFileExtensions.Image))
			for _, v := range resp.AllowedFileExtensions.Image {
				r.AllowedFileExtensions.Image = append(r.AllowedFileExtensions.Image, types.StringValue(v))
			}
			r.AllowedFileExtensions.Other = make([]types.String, 0, len(resp.AllowedFileExtensions.Other))
			for _, v := range resp.AllowedFileExtensions.Other {
				r.AllowedFileExtensions.Other = append(r.AllowedFileExtensions.Other, types.StringValue(v))
			}
			r.AllowedFileExtensions.Presentation = make([]types.String, 0, len(resp.AllowedFileExtensions.Presentation))
			for _, v := range resp.AllowedFileExtensions.Presentation {
				r.AllowedFileExtensions.Presentation = append(r.AllowedFileExtensions.Presentation, types.StringValue(v))
			}
			r.AllowedFileExtensions.Spreadsheet = make([]types.String, 0, len(resp.AllowedFileExtensions.Spreadsheet))
			for _, v := range resp.AllowedFileExtensions.Spreadsheet {
				r.AllowedFileExtensions.Spreadsheet = append(r.AllowedFileExtensions.Spreadsheet, types.StringValue(v))
			}
		}
		if resp.ApprovalStateAttributes == nil {
			r.ApprovalStateAttributes = jsontypes.NewNormalizedNull()
		} else {
			approvalStateAttributesResult, _ := json.Marshal(resp.ApprovalStateAttributes)
			r.ApprovalStateAttributes = jsontypes.NewNormalizedValue(string(approvalStateAttributesResult))
		}
		if resp.AuthSettings == nil {
			r.AuthSettings = nil
		} else {
			r.AuthSettings = &tfTypes.UpsertPortalConfigV3AuthSettings{}
			r.AuthSettings.AutoRedirectToSso = types.BoolPointerValue(resp.AuthSettings.AutoRedirectToSso)
			if resp.AuthSettings.EntryPoint != nil {
				r.AuthSettings.EntryPoint = types.StringValue(string(*resp.AuthSettings.EntryPoint))
			} else {
				r.AuthSettings.EntryPoint = types.StringNull()
			}
			if resp.AuthSettings.PasswordlessLogin == nil {
				r.AuthSettings.PasswordlessLogin = nil
			} else {
				r.AuthSettings.PasswordlessLogin = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.AuthSettings.PasswordlessLogin.Enabled = types.BoolPointerValue(resp.AuthSettings.PasswordlessLogin.Enabled)
			}
			r.AuthSettings.PreferredSsoProviders = make([]types.String, 0, len(resp.AuthSettings.PreferredSsoProviders))
			for _, v := range resp.AuthSettings.PreferredSsoProviders {
				r.AuthSettings.PreferredSsoProviders = append(r.AuthSettings.PreferredSsoProviders, types.StringValue(v))
			}
		}
		if resp.CognitoDetails == nil {
			r.CognitoDetails = nil
		} else {
			r.CognitoDetails = &tfTypes.UpsertPortalConfigV3CognitoDetails{}
			r.CognitoDetails.CognitoUserPoolArn = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolArn)
			r.CognitoDetails.CognitoUserPoolClientID = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolClientID)
			r.CognitoDetails.CognitoUserPoolID = types.StringPointerValue(resp.CognitoDetails.CognitoUserPoolID)
			if resp.CognitoDetails.PasswordPolicy == nil {
				r.CognitoDetails.PasswordPolicy = nil
			} else {
				r.CognitoDetails.PasswordPolicy = &tfTypes.UpsertPortalConfigV3PasswordPolicy{}
				r.CognitoDetails.PasswordPolicy.MinimumLength = types.Int64PointerValue(resp.CognitoDetails.PasswordPolicy.MinimumLength)
				r.CognitoDetails.PasswordPolicy.RequireLowercase = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireLowercase)
				r.CognitoDetails.PasswordPolicy.RequireNumbers = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireNumbers)
				r.CognitoDetails.PasswordPolicy.RequireSymbols = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireSymbols)
				r.CognitoDetails.PasswordPolicy.RequireUppercase = types.BoolPointerValue(resp.CognitoDetails.PasswordPolicy.RequireUppercase)
			}
		}
		r.Config = types.StringPointerValue(resp.Config)
		r.ContactIdentifiers = make([]types.String, 0, len(resp.ContactIdentifiers))
		for _, v := range resp.ContactIdentifiers {
			r.ContactIdentifiers = append(r.ContactIdentifiers, types.StringValue(v))
		}
		if resp.ContractIdentifiers == nil {
			r.ContractIdentifiers = jsontypes.NewNormalizedNull()
		} else {
			contractIdentifiersResult, _ := json.Marshal(resp.ContractIdentifiers)
			r.ContractIdentifiers = jsontypes.NewNormalizedValue(string(contractIdentifiersResult))
		}
		if resp.ContractSelectorConfig == nil {
			r.ContractSelectorConfig = nil
		} else {
			r.ContractSelectorConfig = &tfTypes.UpsertPortalConfigV3ContractSelectorConfig{}
			r.ContractSelectorConfig.ShowInactive = types.BoolPointerValue(resp.ContractSelectorConfig.ShowInactive)
			r.ContractSelectorConfig.TitlePath = types.StringPointerValue(resp.ContractSelectorConfig.TitlePath)
		}
		if resp.DefaultUserToNotify == nil {
			r.DefaultUserToNotify = nil
		} else {
			r.DefaultUserToNotify = &tfTypes.UpsertPortalConfigV3DefaultUserToNotify{}
			r.DefaultUserToNotify.OnPendingUser = []tfTypes.AdminUser{}

			for _, onPendingUserItem := range resp.DefaultUserToNotify.OnPendingUser {
				var onPendingUser tfTypes.AdminUser

				if onPendingUserItem.AdditionalProperties == nil {
					onPendingUser.AdditionalProperties = jsontypes.NewNormalizedNull()
				} else {
					additionalPropertiesResult, _ := json.Marshal(onPendingUserItem.AdditionalProperties)
					onPendingUser.AdditionalProperties = jsontypes.NewNormalizedValue(string(additionalPropertiesResult))
				}
				onPendingUser.DisplayName = types.StringPointerValue(onPendingUserItem.DisplayName)
				onPendingUser.Email = types.StringPointerValue(onPendingUserItem.Email)
				if onPendingUserItem.ImageURI == nil {
					onPendingUser.ImageURI = nil
				} else {
					onPendingUser.ImageURI = &tfTypes.ImageURI{}
					onPendingUser.ImageURI.Key = types.StringPointerValue(onPendingUserItem.ImageURI.Key)
					onPendingUser.ImageURI.Original = types.StringPointerValue(onPendingUserItem.ImageURI.Original)
					onPendingUser.ImageURI.Thumbnail32 = types.StringPointerValue(onPendingUserItem.ImageURI.Thumbnail32)
					onPendingUser.ImageURI.Thumbnail64 = types.StringPointerValue(onPendingUserItem.ImageURI.Thumbnail64)
				}
				onPendingUser.OrgID = types.StringPointerValue(onPendingUserItem.OrgID)
				onPendingUser.Phone = types.StringPointerValue(onPendingUserItem.Phone)
				onPendingUser.Type = types.StringPointerValue(onPendingUserItem.Type)
				onPendingUser.UserID = types.StringPointerValue(onPendingUserItem.UserID)

				r.DefaultUserToNotify.OnPendingUser = append(r.DefaultUserToNotify.OnPendingUser, onPendingUser)
			}
		}
		r.DesignID = types.StringPointerValue(resp.DesignID)
		r.Domain = types.StringPointerValue(resp.Domain)
		if resp.EmailTemplates == nil {
			r.EmailTemplates = nil
		} else {
			r.EmailTemplates = &tfTypes.EmailTemplates{}
			r.EmailTemplates.AdvancedAuth = types.StringPointerValue(resp.EmailTemplates.AdvancedAuth)
			r.EmailTemplates.AdvancedMFA = types.StringPointerValue(resp.EmailTemplates.AdvancedMFA)
			r.EmailTemplates.ConfirmAccount = types.StringPointerValue(resp.EmailTemplates.ConfirmAccount)
			r.EmailTemplates.ConfirmEmailUpdate = types.StringPointerValue(resp.EmailTemplates.ConfirmEmailUpdate)
			r.EmailTemplates.ForgotPassword = types.StringPointerValue(resp.EmailTemplates.ForgotPassword)
			r.EmailTemplates.Invitation = types.StringPointerValue(resp.EmailTemplates.Invitation)
			r.EmailTemplates.JourneyLoginOTP = types.StringPointerValue(resp.EmailTemplates.JourneyLoginOTP)
			r.EmailTemplates.JourneySignInOneTimePassword = types.StringPointerValue(resp.EmailTemplates.JourneySignInOneTimePassword)
			r.EmailTemplates.JourneySignUp = types.StringPointerValue(resp.EmailTemplates.JourneySignUp)
			r.EmailTemplates.OnDocUpload = types.StringPointerValue(resp.EmailTemplates.OnDocUpload)
			r.EmailTemplates.OnMapAPendingUser = types.StringPointerValue(resp.EmailTemplates.OnMapAPendingUser)
			r.EmailTemplates.OnNewQuote = types.StringPointerValue(resp.EmailTemplates.OnNewQuote)
			r.EmailTemplates.OnWorkflowStepAssigned = types.StringPointerValue(resp.EmailTemplates.OnWorkflowStepAssigned)
			r.EmailTemplates.VerifyCodeToSetPassword = types.StringPointerValue(resp.EmailTemplates.VerifyCodeToSetPassword)
		}
		r.Enabled = types.BoolPointerValue(resp.Enabled)
		r.EntityActions = []tfTypes.EntityActions{}

		for _, entityActionsItem := range resp.EntityActions {
			var entityActions tfTypes.EntityActions

			if entityActionsItem.ActionLabel == nil {
				entityActions.ActionLabel = nil
			} else {
				entityActions.ActionLabel = &tfTypes.UpsertPortalConfigV3ActionLabel{}
				entityActions.ActionLabel.De = types.StringPointerValue(entityActionsItem.ActionLabel.De)
				entityActions.ActionLabel.En = types.StringPointerValue(entityActionsItem.ActionLabel.En)
			}
			entityActions.JourneyID = types.StringPointerValue(entityActionsItem.JourneyID)
			if entityActionsItem.Slug != nil {
				entityActions.Slug = types.StringValue(string(*entityActionsItem.Slug))
			} else {
				entityActions.Slug = types.StringNull()
			}

			r.EntityActions = append(r.EntityActions, entityActions)
		}
		if resp.EntityEditRules == nil {
			r.EntityEditRules = jsontypes.NewNormalizedNull()
		} else {
			entityEditRulesResult, _ := json.Marshal(resp.EntityEditRules)
			r.EntityEditRules = jsontypes.NewNormalizedValue(string(entityEditRulesResult))
		}
		if resp.EntityIdentifiers == nil {
			r.EntityIdentifiers = nil
		} else {
			r.EntityIdentifiers = &tfTypes.UpsertPortalConfigV3EntityIdentifiers{}
			if resp.EntityIdentifiers.Type == nil {
				r.EntityIdentifiers.Type = nil
			} else {
				r.EntityIdentifiers.Type = &tfTypes.UpsertPortalConfigV3Type{}
				r.EntityIdentifiers.Type.Attributes = make([]types.String, 0, len(resp.EntityIdentifiers.Type.Attributes))
				for _, v := range resp.EntityIdentifiers.Type.Attributes {
					r.EntityIdentifiers.Type.Attributes = append(r.EntityIdentifiers.Type.Attributes, types.StringValue(v))
				}
				r.EntityIdentifiers.Type.IsEnabled = types.BoolPointerValue(resp.EntityIdentifiers.Type.IsEnabled)
			}
		}
		if len(resp.ExtensionHooks) > 0 {
			r.ExtensionHooks = make(map[string]tfTypes.ExtensionHookConfig, len(resp.ExtensionHooks))
			for extensionHookConfigKey, extensionHookConfigValue := range resp.ExtensionHooks {
				var extensionHookConfigResult tfTypes.ExtensionHookConfig
				extensionHookConfigResult.AppID = types.StringPointerValue(extensionHookConfigValue.AppID)
				extensionHookConfigResult.HookID = types.StringPointerValue(extensionHookConfigValue.HookID)

				r.ExtensionHooks[extensionHookConfigKey] = extensionHookConfigResult
			}
		}
		r.Extensions = []tfTypes.ExtensionConfig{}

		for _, extensionsItem := range resp.Extensions {
			var extensions tfTypes.ExtensionConfig

			extensions.ID = types.StringValue(extensionsItem.ID)
			if len(extensionsItem.Options) > 0 {
				extensions.Options = make(map[string]types.String, len(extensionsItem.Options))
				for key, value := range extensionsItem.Options {
					extensions.Options[key] = types.StringValue(value)
				}
			}
			if extensionsItem.Status != nil {
				extensions.Status = types.StringValue(string(*extensionsItem.Status))
			} else {
				extensions.Status = types.StringNull()
			}

			r.Extensions = append(r.Extensions, extensions)
		}
		if resp.FeatureFlags == nil {
			r.FeatureFlags = jsontypes.NewNormalizedNull()
		} else {
			featureFlagsResult, _ := json.Marshal(resp.FeatureFlags)
			r.FeatureFlags = jsontypes.NewNormalizedValue(string(featureFlagsResult))
		}
		if resp.FeatureSettings == nil {
			r.FeatureSettings = nil
		} else {
			r.FeatureSettings = &tfTypes.UpsertPortalConfigV3FeatureSettings{}
			r.FeatureSettings.Billing = types.BoolPointerValue(resp.FeatureSettings.Billing)
			r.FeatureSettings.ChangeDueDate = types.BoolPointerValue(resp.FeatureSettings.ChangeDueDate)
			r.FeatureSettings.NewDesign = types.BoolPointerValue(resp.FeatureSettings.NewDesign)
			r.FeatureSettings.StartPage = types.BoolPointerValue(resp.FeatureSettings.StartPage)
		}
		if resp.Grants == nil {
			r.Grants = jsontypes.NewNormalizedNull()
		} else {
			grantsResult, _ := json.Marshal(resp.Grants)
			r.Grants = jsontypes.NewNormalizedValue(string(grantsResult))
		}
		if resp.IdentityProviders == nil {
			r.IdentityProviders = jsontypes.NewNormalizedNull()
		} else {
			identityProvidersResult, _ := json.Marshal(resp.IdentityProviders)
			r.IdentityProviders = jsontypes.NewNormalizedValue(string(identityProvidersResult))
		}
		if resp.Images == nil {
			r.Images = nil
		} else {
			r.Images = &tfTypes.UpsertPortalConfigV3Images{}
			r.Images.OrderLeftTeaser = types.StringPointerValue(resp.Images.OrderLeftTeaser)
			r.Images.OrderRightTeaser = types.StringPointerValue(resp.Images.OrderRightTeaser)
			r.Images.WelcomeBanner = types.StringPointerValue(resp.Images.WelcomeBanner)
		}
		r.InactiveContractCutoffYears = types.Float64PointerValue(resp.InactiveContractCutoffYears)
		r.IsDummy = types.BoolPointerValue(resp.IsDummy)
		r.IsEpilotDomain = types.BoolPointerValue(resp.IsEpilotDomain)
		r.IsV3Item = types.BoolPointerValue(resp.IsV3Item)
		r.MeterReadingGracePeriod = types.Float64PointerValue(resp.MeterReadingGracePeriod)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.OrgSettings == nil {
			r.OrgSettings = nil
		} else {
			r.OrgSettings = &tfTypes.PortalConfigV3OrgSettings{}
			if resp.OrgSettings.Canary == nil {
				r.OrgSettings.Canary = nil
			} else {
				r.OrgSettings.Canary = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.OrgSettings.Canary.Enabled = types.BoolPointerValue(resp.OrgSettings.Canary.Enabled)
			}
			if resp.OrgSettings.Notracking == nil {
				r.OrgSettings.Notracking = nil
			} else {
				r.OrgSettings.Notracking = &tfTypes.UpsertPortalConfigV3AdvancedMfa{}
				r.OrgSettings.Notracking.Enabled = types.BoolPointerValue(resp.OrgSettings.Notracking.Enabled)
			}
		}
		r.OrganizationID = types.StringPointerValue(resp.OrganizationID)
		r.Origin = types.StringPointerValue(resp.Origin)
		if resp.Pages == nil {
			r.Pages = jsontypes.NewNormalizedNull()
		} else {
			pagesResult, _ := json.Marshal(resp.Pages)
			r.Pages = jsontypes.NewNormalizedValue(string(pagesResult))
		}
		r.PortalID = types.StringPointerValue(resp.PortalID)
		r.PortalSkV3 = types.StringPointerValue(resp.PortalSkV3)
		r.PreventSearchEngineIndexing = types.BoolPointerValue(resp.PreventSearchEngineIndexing)
		if resp.RegistrationIdentifiers == nil {
			r.RegistrationIdentifiers = jsontypes.NewNormalizedNull()
		} else {
			registrationIdentifiersResult, _ := json.Marshal(resp.RegistrationIdentifiers)
			r.RegistrationIdentifiers = jsontypes.NewNormalizedValue(string(registrationIdentifiersResult))
		}
		if resp.SelfRegistrationSetting != nil {
			r.SelfRegistrationSetting = types.StringValue(string(*resp.SelfRegistrationSetting))
		} else {
			r.SelfRegistrationSetting = types.StringNull()
		}
		r.TriggeredJourneys = []tfTypes.PortalConfigV3TriggeredJourneys{}

		for _, triggeredJourneysItem := range resp.TriggeredJourneys {
			var triggeredJourneys tfTypes.PortalConfigV3TriggeredJourneys

			triggeredJourneys.JourneyID = types.StringPointerValue(triggeredJourneysItem.JourneyID)
			if triggeredJourneysItem.TriggerName != nil {
				triggeredJourneys.TriggerName = types.StringValue(string(*triggeredJourneysItem.TriggerName))
			} else {
				triggeredJourneys.TriggerName = types.StringNull()
			}

			r.TriggeredJourneys = append(r.TriggeredJourneys, triggeredJourneys)
		}
	}

	return diags
}

func (r *PortalConfigDataSourceModel) ToOperationsGetPortalConfigV3Request(ctx context.Context) (*operations.GetPortalConfigV3Request, diag.Diagnostics) {
	var diags diag.Diagnostics

	var portalID string
	portalID = r.PortalID.ValueString()

	out := operations.GetPortalConfigV3Request{
		PortalID: portalID,
	}

	return &out, diags
}
