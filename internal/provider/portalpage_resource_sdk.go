// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"math/big"
	"time"
)

func (r *PortalPageResourceModel) ToSharedPageRequest() *shared.PageRequest {
	var additionalProperties interface{}
	if !r.AdditionalProperties.IsUnknown() && !r.AdditionalProperties.IsNull() {
		_ = json.Unmarshal([]byte(r.AdditionalProperties.ValueString()), &additionalProperties)
	}
	blocks := make(map[string]shared.Block)
	for blocksKey, blocksValue := range r.Blocks {
		var additionalProperties1 interface{}
		if !blocksValue.AdditionalProperties.IsUnknown() && !blocksValue.AdditionalProperties.IsNull() {
			_ = json.Unmarshal([]byte(blocksValue.AdditionalProperties.ValueString()), &additionalProperties1)
		}
		var id string
		id = blocksValue.ID.ValueString()

		var order float64
		order, _ = blocksValue.Order.ValueBigFloat().Float64()

		parentID := new(string)
		if !blocksValue.ParentID.IsUnknown() && !blocksValue.ParentID.IsNull() {
			*parentID = blocksValue.ParentID.ValueString()
		} else {
			parentID = nil
		}
		var props *shared.BlockProps
		if blocksValue.Props != nil {
			var additionalProperties2 interface{}
			if !blocksValue.Props.AdditionalProperties.IsUnknown() && !blocksValue.Props.AdditionalProperties.IsNull() {
				_ = json.Unmarshal([]byte(blocksValue.Props.AdditionalProperties.ValueString()), &additionalProperties2)
			}
			var content *shared.Content
			if blocksValue.Props.Content != nil {
				content = &shared.Content{}
			}
			var design *shared.Design
			if blocksValue.Props.Design != nil {
				design = &shared.Design{}
			}
			var visibility *shared.Visibility
			if blocksValue.Props.Visibility != nil {
				visibility = &shared.Visibility{}
			}
			props = &shared.BlockProps{
				AdditionalProperties: additionalProperties2,
				Content:              content,
				Design:               design,
				Visibility:           visibility,
			}
		}
		var typeVar string
		typeVar = blocksValue.Type.ValueString()

		blocksInst := shared.Block{
			AdditionalProperties: additionalProperties1,
			ID:                   id,
			Order:                order,
			ParentID:             parentID,
			Props:                props,
			Type:                 typeVar,
		}
		blocks[blocksKey] = blocksInst
	}
	content1 := make(map[string]interface{})
	for contentKey, contentValue := range r.Content {
		var contentInst interface{}
		_ = json.Unmarshal([]byte(contentValue.ValueString()), &contentInst)
		content1[contentKey] = contentInst
	}
	design1 := make(map[string]interface{})
	for designKey, designValue := range r.Design {
		var designInst interface{}
		_ = json.Unmarshal([]byte(designValue.ValueString()), &designInst)
		design1[designKey] = designInst
	}
	isDeleted := new(bool)
	if !r.IsDeleted.IsUnknown() && !r.IsDeleted.IsNull() {
		*isDeleted = r.IsDeleted.ValueBool()
	} else {
		isDeleted = nil
	}
	isEntryRoute := new(bool)
	if !r.IsEntryRoute.IsUnknown() && !r.IsEntryRoute.IsNull() {
		*isEntryRoute = r.IsEntryRoute.ValueBool()
	} else {
		isEntryRoute = nil
	}
	isPublic := new(bool)
	if !r.IsPublic.IsUnknown() && !r.IsPublic.IsNull() {
		*isPublic = r.IsPublic.ValueBool()
	} else {
		isPublic = nil
	}
	isSystem := new(bool)
	if !r.IsSystem.IsUnknown() && !r.IsSystem.IsNull() {
		*isSystem = r.IsSystem.ValueBool()
	} else {
		isSystem = nil
	}
	var order1 float64
	order1, _ = r.Order.ValueBigFloat().Float64()

	parentId1 := new(string)
	if !r.ParentID.IsUnknown() && !r.ParentID.IsNull() {
		*parentId1 = r.ParentID.ValueString()
	} else {
		parentId1 = nil
	}
	path := new(string)
	if !r.Path.IsUnknown() && !r.Path.IsNull() {
		*path = r.Path.ValueString()
	} else {
		path = nil
	}
	var schema []shared.PageRequestSchema = []shared.PageRequestSchema{}
	for _, schemaItem := range r.Schema {
		schema = append(schema, shared.PageRequestSchema(schemaItem.ValueString()))
	}
	var slug string
	slug = r.Slug.ValueString()

	visibility1 := make(map[string]interface{})
	for visibilityKey, visibilityValue := range r.Visibility {
		var visibilityInst interface{}
		_ = json.Unmarshal([]byte(visibilityValue.ValueString()), &visibilityInst)
		visibility1[visibilityKey] = visibilityInst
	}
	out := shared.PageRequest{
		AdditionalProperties: additionalProperties,
		Blocks:               blocks,
		Content:              content1,
		Design:               design1,
		IsDeleted:            isDeleted,
		IsEntryRoute:         isEntryRoute,
		IsPublic:             isPublic,
		IsSystem:             isSystem,
		Order:                order1,
		ParentID:             parentId1,
		Path:                 path,
		Schema:               schema,
		Slug:                 slug,
		Visibility:           visibility1,
	}
	return &out
}

func (r *PortalPageResourceModel) RefreshFromSharedPage(resp *shared.Page) {
	if resp != nil {
		if resp.AdditionalProperties == nil {
			r.AdditionalProperties = types.StringNull()
		} else {
			additionalPropertiesResult, _ := json.Marshal(resp.AdditionalProperties)
			r.AdditionalProperties = types.StringValue(string(additionalPropertiesResult))
		}
		if len(resp.Blocks) > 0 {
			r.Blocks = make(map[string]tfTypes.Block)
			for blockKey, blockValue := range resp.Blocks {
				var blockResult tfTypes.Block
				if blockValue.AdditionalProperties == nil {
					blockResult.AdditionalProperties = types.StringNull()
				} else {
					additionalPropertiesResult1, _ := json.Marshal(blockValue.AdditionalProperties)
					blockResult.AdditionalProperties = types.StringValue(string(additionalPropertiesResult1))
				}
				blockResult.ID = types.StringValue(blockValue.ID)
				blockResult.Order = types.NumberValue(big.NewFloat(float64(blockValue.Order)))
				blockResult.ParentID = types.StringPointerValue(blockValue.ParentID)
				if blockValue.Props == nil {
					blockResult.Props = nil
				} else {
					blockResult.Props = &tfTypes.BlockProps{}
					if blockValue.Props.AdditionalProperties == nil {
						blockResult.Props.AdditionalProperties = types.StringNull()
					} else {
						additionalPropertiesResult2, _ := json.Marshal(blockValue.Props.AdditionalProperties)
						blockResult.Props.AdditionalProperties = types.StringValue(string(additionalPropertiesResult2))
					}
					if blockValue.Props.Content == nil {
						blockResult.Props.Content = nil
					} else {
						blockResult.Props.Content = &tfTypes.Content{}
					}
					if blockValue.Props.Design == nil {
						blockResult.Props.Design = nil
					} else {
						blockResult.Props.Design = &tfTypes.Content{}
					}
					if blockValue.Props.Visibility == nil {
						blockResult.Props.Visibility = nil
					} else {
						blockResult.Props.Visibility = &tfTypes.Content{}
					}
				}
				blockResult.Type = types.StringValue(blockValue.Type)
				r.Blocks[blockKey] = blockResult
			}
		}
		if len(resp.Content) > 0 {
			r.Content = make(map[string]types.String)
			for key, value := range resp.Content {
				result, _ := json.Marshal(value)
				r.Content[key] = types.StringValue(string(result))
			}
		}
		if len(resp.Design) > 0 {
			r.Design = make(map[string]types.String)
			for key1, value1 := range resp.Design {
				result1, _ := json.Marshal(value1)
				r.Design[key1] = types.StringValue(string(result1))
			}
		}
		r.ID = types.StringValue(resp.ID)
		r.IsDeleted = types.BoolPointerValue(resp.IsDeleted)
		r.IsEntryRoute = types.BoolPointerValue(resp.IsEntryRoute)
		r.IsPublic = types.BoolPointerValue(resp.IsPublic)
		r.IsSystem = types.BoolPointerValue(resp.IsSystem)
		if resp.LastModifiedAt != nil {
			r.LastModifiedAt = types.StringValue(resp.LastModifiedAt.Format(time.RFC3339Nano))
		} else {
			r.LastModifiedAt = types.StringNull()
		}
		r.Order = types.NumberValue(big.NewFloat(float64(resp.Order)))
		r.ParentID = types.StringPointerValue(resp.ParentID)
		r.Path = types.StringPointerValue(resp.Path)
		r.Schema = []types.String{}
		for _, v := range resp.Schema {
			r.Schema = append(r.Schema, types.StringValue(string(v)))
		}
		r.Slug = types.StringValue(resp.Slug)
		if len(resp.Visibility) > 0 {
			r.Visibility = make(map[string]types.String)
			for key2, value2 := range resp.Visibility {
				result2, _ := json.Marshal(value2)
				r.Visibility[key2] = types.StringValue(string(result2))
			}
		}
	}
}
