// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-portal/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators"
	speakeasy_float64validators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/float64validators"
	speakeasy_objectvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/objectvalidators"
	speakeasy_stringvalidators "github.com/epilot-dev/terraform-provider-epilot-portal/internal/validators/stringvalidators"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &PortalPageResource{}
var _ resource.ResourceWithImportState = &PortalPageResource{}

func NewPortalPageResource() resource.Resource {
	return &PortalPageResource{}
}

// PortalPageResource defines the resource implementation.
type PortalPageResource struct {
	// Provider configured SDK client.
	client *sdk.SDK
}

// PortalPageResourceModel describes the resource data model.
type PortalPageResourceModel struct {
	AdditionalProperties jsontypes.Normalized            `tfsdk:"additional_properties"`
	Blocks               map[string]tfTypes.BlockRequest `tfsdk:"blocks"`
	Content              map[string]jsontypes.Normalized `tfsdk:"content"`
	Design               map[string]jsontypes.Normalized `tfsdk:"design"`
	Domain               types.String                    `queryParam:"style=form,explode=true,name=domain" tfsdk:"domain"`
	ID                   types.String                    `tfsdk:"id"`
	IsDeleted            types.Bool                      `tfsdk:"is_deleted"`
	IsEntryRoute         types.Bool                      `tfsdk:"is_entry_route"`
	IsPublic             types.Bool                      `tfsdk:"is_public"`
	IsSystem             types.Bool                      `tfsdk:"is_system"`
	LastModifiedAt       types.String                    `tfsdk:"last_modified_at"`
	Order                types.Float64                   `tfsdk:"order"`
	ParentID             types.String                    `tfsdk:"parent_id"`
	Path                 types.String                    `tfsdk:"path"`
	Schema               []types.String                  `tfsdk:"schema"`
	Slug                 types.String                    `tfsdk:"slug"`
	Visibility           map[string]jsontypes.Normalized `tfsdk:"visibility"`
}

func (r *PortalPageResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_portal_page"
}

func (r *PortalPageResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "PortalPage Resource",
		Attributes: map[string]schema.Attribute{
			"additional_properties": schema.StringAttribute{
				CustomType:  jsontypes.NormalizedType{},
				Computed:    true,
				Optional:    true,
				Description: `Parsed as JSON.`,
			},
			"blocks": schema.MapNestedAttribute{
				Computed: true,
				Optional: true,
				NestedObject: schema.NestedAttributeObject{
					Validators: []validator.Object{
						speakeasy_objectvalidators.NotNull(),
					},
					Attributes: map[string]schema.Attribute{
						"additional_properties": schema.StringAttribute{
							CustomType:  jsontypes.NormalizedType{},
							Computed:    true,
							Optional:    true,
							Description: `Parsed as JSON.`,
						},
						"order": schema.Float64Attribute{
							Computed:    true,
							Optional:    true,
							Description: `The order of the block. Not Null`,
							Validators: []validator.Float64{
								speakeasy_float64validators.NotNull(),
							},
						},
						"parent_id": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The id of the parent block`,
						},
						"props": schema.SingleNestedAttribute{
							Computed: true,
							Optional: true,
							Attributes: map[string]schema.Attribute{
								"additional_properties": schema.StringAttribute{
									CustomType:  jsontypes.NormalizedType{},
									Computed:    true,
									Optional:    true,
									Description: `Parsed as JSON.`,
								},
								"content": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The content of the block`,
								},
								"design": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The design of the block`,
								},
								"visibility": schema.SingleNestedAttribute{
									Computed:    true,
									Optional:    true,
									Description: `The conditions that need to be met for the block to be shown`,
								},
							},
						},
						"type": schema.StringAttribute{
							Computed:    true,
							Optional:    true,
							Description: `The type of the block. eg; tabs, tab, group, attribute. Not Null`,
							Validators: []validator.String{
								speakeasy_stringvalidators.NotNull(),
							},
						},
					},
				},
			},
			"content": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: jsontypes.NormalizedType{},
				Description: `The content of the page`,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"design": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: jsontypes.NormalizedType{},
				Description: `The design of the page`,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
			"domain": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: `The id of the page`,
			},
			"is_deleted": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Send the flag as true to delete the page`,
			},
			"is_entry_route": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether the page is the entry route`,
			},
			"is_public": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether the page is public`,
			},
			"is_system": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Whether the page is a system page`,
			},
			"last_modified_at": schema.StringAttribute{
				Computed:    true,
				Description: `Last modified timestamp of the Page`,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"order": schema.Float64Attribute{
				Required:    true,
				Description: `The order of the block`,
			},
			"parent_id": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `The id of the parent page`,
			},
			"path": schema.StringAttribute{
				Computed:           true,
				Optional:           true,
				DeprecationMessage: `This will be removed in a future release, please migrate away from it as soon as possible`,
				Description:        `The path of the page`,
			},
			"schema": schema.ListAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: types.StringType,
			},
			"slug": schema.StringAttribute{
				Required:    true,
				Description: `The slug of the page`,
			},
			"visibility": schema.MapAttribute{
				Computed:    true,
				Optional:    true,
				ElementType: jsontypes.NormalizedType{},
				Description: `The conditions that need to be met for the page to be shown`,
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(validators.IsValidJSON()),
				},
			},
		},
	}
}

func (r *PortalPageResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *PortalPageResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *PortalPageResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsCreatePortalPageRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.CreatePortalPage(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Page != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPage(ctx, res.Page)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	request1, request1Diags := data.ToOperationsGetPortalPageRequest(ctx)
	resp.Diagnostics.Append(request1Diags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res1, err := r.client.ECPAdmin.GetPortalPage(ctx, *request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.Page != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPage(ctx, res1.Page)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalPageResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *PortalPageResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetPortalPageRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.GetPortalPage(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Page != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPage(ctx, res.Page)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalPageResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *PortalPageResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsUpdatePortalPageRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.UpdatePortalPage(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.Page != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedPage(ctx, res.Page)...)

	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(refreshPlan(ctx, plan, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *PortalPageResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *PortalPageResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsDeletePortalPageRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.ECPAdmin.DeletePortalPage(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *PortalPageResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
