// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/internal/utils"
)

type RoleType string

const (
	RoleTypeUserRole    RoleType = "UserRole"
	RoleTypeOrgRole     RoleType = "OrgRole"
	RoleTypeShareRole   RoleType = "ShareRole"
	RoleTypePartnerRole RoleType = "PartnerRole"
	RoleTypePortalRole  RoleType = "PortalRole"
)

type Role struct {
	UserRole    *UserRole    `queryParam:"inline,name=Role"`
	OrgRole     *OrgRole     `queryParam:"inline,name=Role"`
	ShareRole   *ShareRole   `queryParam:"inline,name=Role"`
	PartnerRole *PartnerRole `queryParam:"inline,name=Role"`
	PortalRole  *PortalRole  `queryParam:"inline,name=Role"`

	Type RoleType
}

func CreateRoleUserRole(userRole UserRole) Role {
	typ := RoleTypeUserRole

	return Role{
		UserRole: &userRole,
		Type:     typ,
	}
}

func CreateRoleOrgRole(orgRole OrgRole) Role {
	typ := RoleTypeOrgRole

	return Role{
		OrgRole: &orgRole,
		Type:    typ,
	}
}

func CreateRoleShareRole(shareRole ShareRole) Role {
	typ := RoleTypeShareRole

	return Role{
		ShareRole: &shareRole,
		Type:      typ,
	}
}

func CreateRolePartnerRole(partnerRole PartnerRole) Role {
	typ := RoleTypePartnerRole

	return Role{
		PartnerRole: &partnerRole,
		Type:        typ,
	}
}

func CreateRolePortalRole(portalRole PortalRole) Role {
	typ := RoleTypePortalRole

	return Role{
		PortalRole: &portalRole,
		Type:       typ,
	}
}

func (u *Role) UnmarshalJSON(data []byte) error {

	var userRole UserRole = UserRole{}
	if err := utils.UnmarshalJSON(data, &userRole, "", true, nil); err == nil {
		u.UserRole = &userRole
		u.Type = RoleTypeUserRole
		return nil
	}

	var orgRole OrgRole = OrgRole{}
	if err := utils.UnmarshalJSON(data, &orgRole, "", true, nil); err == nil {
		u.OrgRole = &orgRole
		u.Type = RoleTypeOrgRole
		return nil
	}

	var shareRole ShareRole = ShareRole{}
	if err := utils.UnmarshalJSON(data, &shareRole, "", true, nil); err == nil {
		u.ShareRole = &shareRole
		u.Type = RoleTypeShareRole
		return nil
	}

	var partnerRole PartnerRole = PartnerRole{}
	if err := utils.UnmarshalJSON(data, &partnerRole, "", true, nil); err == nil {
		u.PartnerRole = &partnerRole
		u.Type = RoleTypePartnerRole
		return nil
	}

	var portalRole PortalRole = PortalRole{}
	if err := utils.UnmarshalJSON(data, &portalRole, "", true, nil); err == nil {
		u.PortalRole = &portalRole
		u.Type = RoleTypePortalRole
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Role", string(data))
}

func (u Role) MarshalJSON() ([]byte, error) {
	if u.UserRole != nil {
		return utils.MarshalJSON(u.UserRole, "", true)
	}

	if u.OrgRole != nil {
		return utils.MarshalJSON(u.OrgRole, "", true)
	}

	if u.ShareRole != nil {
		return utils.MarshalJSON(u.ShareRole, "", true)
	}

	if u.PartnerRole != nil {
		return utils.MarshalJSON(u.PartnerRole, "", true)
	}

	if u.PortalRole != nil {
		return utils.MarshalJSON(u.PortalRole, "", true)
	}

	return nil, errors.New("could not marshal union type Role: all fields are null")
}
