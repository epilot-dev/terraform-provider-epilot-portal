// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/internal/utils"
)

type GrantWithDependenciesEffect string

const (
	GrantWithDependenciesEffectAllow GrantWithDependenciesEffect = "allow"
	GrantWithDependenciesEffectDeny  GrantWithDependenciesEffect = "deny"
)

func (e GrantWithDependenciesEffect) ToPointer() *GrantWithDependenciesEffect {
	return &e
}
func (e *GrantWithDependenciesEffect) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = GrantWithDependenciesEffect(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantWithDependenciesEffect: %v", v)
	}
}

type GrantWithDependencies struct {
	Action     string           `json:"action"`
	Conditions []GrantCondition `json:"conditions,omitempty"`
	// Provided additional dependencies, exploded when storing the role
	Dependencies []Grant                      `json:"dependencies,omitempty"`
	Effect       *GrantWithDependenciesEffect `default:"allow" json:"effect"`
	Resource     *string                      `json:"resource,omitempty"`
}

func (g GrantWithDependencies) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GrantWithDependencies) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"action"}); err != nil {
		return err
	}
	return nil
}

func (g *GrantWithDependencies) GetAction() string {
	if g == nil {
		return ""
	}
	return g.Action
}

func (g *GrantWithDependencies) GetConditions() []GrantCondition {
	if g == nil {
		return nil
	}
	return g.Conditions
}

func (g *GrantWithDependencies) GetDependencies() []Grant {
	if g == nil {
		return nil
	}
	return g.Dependencies
}

func (g *GrantWithDependencies) GetEffect() *GrantWithDependenciesEffect {
	if g == nil {
		return nil
	}
	return g.Effect
}

func (g *GrantWithDependencies) GetResource() *string {
	if g == nil {
		return nil
	}
	return g.Resource
}
