// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Prompt string

const (
	PromptLogin         Prompt = "login"
	PromptSelectAccount Prompt = "select_account"
	PromptConsent       Prompt = "consent"
)

func (e Prompt) ToPointer() *Prompt {
	return &e
}
func (e *Prompt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "login":
		fallthrough
	case "select_account":
		fallthrough
	case "consent":
		*e = Prompt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Prompt: %v", v)
	}
}

type OIDCProviderConfig struct {
	ClientID     string                `json:"client_id"`
	ClientSecret *string               `json:"client_secret,omitempty"`
	Metadata     *OIDCProviderMetadata `json:"metadata,omitempty"`
	// Issuing Authority URL
	OidcIssuer string  `json:"oidc_issuer"`
	Prompt     *Prompt `json:"prompt,omitempty"`
	// Redirect URI for the OIDC flow
	RedirectURI *string `json:"redirect_uri,omitempty"`
	// Space-separated list of OAuth 2.0 scopes to request from OpenID Connect
	Scope string `json:"scope"`
}

func (o *OIDCProviderConfig) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *OIDCProviderConfig) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *OIDCProviderConfig) GetMetadata() *OIDCProviderMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *OIDCProviderConfig) GetOidcIssuer() string {
	if o == nil {
		return ""
	}
	return o.OidcIssuer
}

func (o *OIDCProviderConfig) GetPrompt() *Prompt {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *OIDCProviderConfig) GetRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURI
}

func (o *OIDCProviderConfig) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}
