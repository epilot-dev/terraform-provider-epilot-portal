// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Headline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *Headline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *Headline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type ActionWidgetType string

const (
	ActionWidgetTypeActionWidget       ActionWidgetType = "ACTION_WIDGET"
	ActionWidgetTypeContentWidget      ActionWidgetType = "CONTENT_WIDGET"
	ActionWidgetTypeEntityWidget       ActionWidgetType = "ENTITY_WIDGET"
	ActionWidgetTypeTeaserWidget       ActionWidgetType = "TEASER_WIDGET"
	ActionWidgetTypeDocumentWidget     ActionWidgetType = "DOCUMENT_WIDGET"
	ActionWidgetTypePaymentWidget      ActionWidgetType = "PAYMENT_WIDGET"
	ActionWidgetTypeMeterReadingWidget ActionWidgetType = "METER_READING_WIDGET"
	ActionWidgetTypeMeterChartWidget   ActionWidgetType = "METER_CHART_WIDGET"
	ActionWidgetTypeCampaignWidget     ActionWidgetType = "CAMPAIGN_WIDGET"
)

func (e ActionWidgetType) ToPointer() *ActionWidgetType {
	return &e
}
func (e *ActionWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = ActionWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionWidgetType: %v", v)
	}
}

type ActionWidget struct {
	Actions  []WidgetAction `json:"actions,omitempty"`
	Headline *Headline      `json:"headline,omitempty"`
	ID       string         `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64            `json:"listIndex"`
	SubHeadline *SubHeadline     `json:"subHeadline,omitempty"`
	Type        ActionWidgetType `json:"type"`
}

func (o *ActionWidget) GetActions() []WidgetAction {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *ActionWidget) GetHeadline() *Headline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *ActionWidget) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ActionWidget) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *ActionWidget) GetSubHeadline() *SubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *ActionWidget) GetType() ActionWidgetType {
	if o == nil {
		return ActionWidgetType("")
	}
	return o.Type
}
