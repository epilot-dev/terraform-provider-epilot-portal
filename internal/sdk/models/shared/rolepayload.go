// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/internal/utils"
	"time"
)

type SchemasPortalRoleType string

const (
	SchemasPortalRoleTypePortalRole SchemasPortalRoleType = "portal_role"
)

func (e SchemasPortalRoleType) ToPointer() *SchemasPortalRoleType {
	return &e
}
func (e *SchemasPortalRoleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "portal_role":
		*e = SchemasPortalRoleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPortalRoleType: %v", v)
	}
}

// PortalRoleSchemas - A role that is applied to end customers and installers using the Portals
type PortalRoleSchemas struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID string `json:"id"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID string `json:"organization_id"`
	// URL-friendly name for the role
	Slug string                `json:"slug"`
	Type SchemasPortalRoleType `json:"type"`
}

func (p PortalRoleSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PortalRoleSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"grants", "id", "name", "organization_id", "slug", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PortalRoleSchemas) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PortalRoleSchemas) GetGrants() []GrantWithDependencies {
	if p == nil {
		return []GrantWithDependencies{}
	}
	return p.Grants
}

func (p *PortalRoleSchemas) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PortalRoleSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PortalRoleSchemas) GetOrganizationID() string {
	if p == nil {
		return ""
	}
	return p.OrganizationID
}

func (p *PortalRoleSchemas) GetSlug() string {
	if p == nil {
		return ""
	}
	return p.Slug
}

func (p *PortalRoleSchemas) GetType() SchemasPortalRoleType {
	if p == nil {
		return SchemasPortalRoleType("")
	}
	return p.Type
}

type SchemasType string

const (
	SchemasTypePartnerRole SchemasType = "partner_role"
)

func (e SchemasType) ToPointer() *SchemasType {
	return &e
}
func (e *SchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "partner_role":
		*e = SchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasType: %v", v)
	}
}

// PartnerRoleSchemas - A role that appears in another organization's role list that can be assigned but not modified by the partner organization.
type PartnerRoleSchemas struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID string `json:"id"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID string  `json:"organization_id"`
	PartnerOrgID   *string `json:"partner_org_id,omitempty"`
	// URL-friendly name for the role
	Slug string      `json:"slug"`
	Type SchemasType `json:"type"`
}

func (p PartnerRoleSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PartnerRoleSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"grants", "id", "name", "organization_id", "slug", "type"}); err != nil {
		return err
	}
	return nil
}

func (p *PartnerRoleSchemas) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PartnerRoleSchemas) GetGrants() []GrantWithDependencies {
	if p == nil {
		return []GrantWithDependencies{}
	}
	return p.Grants
}

func (p *PartnerRoleSchemas) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PartnerRoleSchemas) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PartnerRoleSchemas) GetOrganizationID() string {
	if p == nil {
		return ""
	}
	return p.OrganizationID
}

func (p *PartnerRoleSchemas) GetPartnerOrgID() *string {
	if p == nil {
		return nil
	}
	return p.PartnerOrgID
}

func (p *PartnerRoleSchemas) GetSlug() string {
	if p == nil {
		return ""
	}
	return p.Slug
}

func (p *PartnerRoleSchemas) GetType() SchemasType {
	if p == nil {
		return SchemasType("")
	}
	return p.Type
}

type SchemasShareRoleType string

const (
	SchemasShareRoleTypeShareRole SchemasShareRoleType = "share_role"
)

func (e SchemasShareRoleType) ToPointer() *SchemasShareRoleType {
	return &e
}
func (e *SchemasShareRoleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "share_role":
		*e = SchemasShareRoleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasShareRoleType: %v", v)
	}
}

// ShareRoleSchemas - A role that can be assigned to users in other organizations for sharing purposes.
type ShareRoleSchemas struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID string `json:"id"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID string `json:"organization_id"`
	// URL-friendly name for the role
	Slug string               `json:"slug"`
	Type SchemasShareRoleType `json:"type"`
}

func (s ShareRoleSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ShareRoleSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"grants", "id", "name", "organization_id", "slug", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *ShareRoleSchemas) GetExpiresAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ExpiresAt
}

func (s *ShareRoleSchemas) GetGrants() []GrantWithDependencies {
	if s == nil {
		return []GrantWithDependencies{}
	}
	return s.Grants
}

func (s *ShareRoleSchemas) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *ShareRoleSchemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *ShareRoleSchemas) GetOrganizationID() string {
	if s == nil {
		return ""
	}
	return s.OrganizationID
}

func (s *ShareRoleSchemas) GetSlug() string {
	if s == nil {
		return ""
	}
	return s.Slug
}

func (s *ShareRoleSchemas) GetType() SchemasShareRoleType {
	if s == nil {
		return SchemasShareRoleType("")
	}
	return s.Type
}

type Type string

const (
	TypeOrgRole Type = "org_role"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "org_role":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

// Schemas - A role automatically applied to all users in an organization.
type Schemas struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID string `json:"id"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID string `json:"organization_id"`
	// The pricing tier of the organization this root role is based on
	PricingTier *string `json:"pricing_tier,omitempty"`
	// URL-friendly name for the role
	Slug string `json:"slug"`
	Type Type   `json:"type"`
}

func (s Schemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, []string{"grants", "id", "name", "organization_id", "slug", "type"}); err != nil {
		return err
	}
	return nil
}

func (s *Schemas) GetExpiresAt() *time.Time {
	if s == nil {
		return nil
	}
	return s.ExpiresAt
}

func (s *Schemas) GetGrants() []GrantWithDependencies {
	if s == nil {
		return []GrantWithDependencies{}
	}
	return s.Grants
}

func (s *Schemas) GetID() string {
	if s == nil {
		return ""
	}
	return s.ID
}

func (s *Schemas) GetName() string {
	if s == nil {
		return ""
	}
	return s.Name
}

func (s *Schemas) GetOrganizationID() string {
	if s == nil {
		return ""
	}
	return s.OrganizationID
}

func (s *Schemas) GetPricingTier() *string {
	if s == nil {
		return nil
	}
	return s.PricingTier
}

func (s *Schemas) GetSlug() string {
	if s == nil {
		return ""
	}
	return s.Slug
}

func (s *Schemas) GetType() Type {
	if s == nil {
		return Type("")
	}
	return s.Type
}

type SchemasUserRoleType string

const (
	SchemasUserRoleTypeUserRole SchemasUserRoleType = "user_role"
)

func (e SchemasUserRoleType) ToPointer() *SchemasUserRoleType {
	return &e
}
func (e *SchemasUserRoleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_role":
		*e = SchemasUserRoleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasUserRoleType: %v", v)
	}
}

// UserRoleSchemas - A standard user role. Must be explicitly assigned to users.
type UserRoleSchemas struct {
	// date and time then the role will expire
	ExpiresAt *time.Time              `json:"expires_at,omitempty"`
	Grants    []GrantWithDependencies `json:"grants"`
	// Format: <organization_id>:<slug>
	ID string `json:"id"`
	// Human-friendly name for the role
	Name string `json:"name"`
	// Id of an organization
	OrganizationID string `json:"organization_id"`
	// URL-friendly name for the role
	Slug string              `json:"slug"`
	Type SchemasUserRoleType `json:"type"`
}

func (u UserRoleSchemas) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UserRoleSchemas) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"grants", "id", "name", "organization_id", "slug", "type"}); err != nil {
		return err
	}
	return nil
}

func (u *UserRoleSchemas) GetExpiresAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.ExpiresAt
}

func (u *UserRoleSchemas) GetGrants() []GrantWithDependencies {
	if u == nil {
		return []GrantWithDependencies{}
	}
	return u.Grants
}

func (u *UserRoleSchemas) GetID() string {
	if u == nil {
		return ""
	}
	return u.ID
}

func (u *UserRoleSchemas) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UserRoleSchemas) GetOrganizationID() string {
	if u == nil {
		return ""
	}
	return u.OrganizationID
}

func (u *UserRoleSchemas) GetSlug() string {
	if u == nil {
		return ""
	}
	return u.Slug
}

func (u *UserRoleSchemas) GetType() SchemasUserRoleType {
	if u == nil {
		return SchemasUserRoleType("")
	}
	return u.Type
}

type RolePayloadType string

const (
	RolePayloadTypeUserRoleSchemas    RolePayloadType = "UserRole_Schemas"
	RolePayloadTypeSchemas            RolePayloadType = "Schemas"
	RolePayloadTypeShareRoleSchemas   RolePayloadType = "ShareRole_Schemas"
	RolePayloadTypePartnerRoleSchemas RolePayloadType = "PartnerRole_Schemas"
	RolePayloadTypePortalRoleSchemas  RolePayloadType = "PortalRole_Schemas"
)

type RolePayload struct {
	UserRoleSchemas    *UserRoleSchemas    `queryParam:"inline" name:"RolePayload"`
	Schemas            *Schemas            `queryParam:"inline" name:"RolePayload"`
	ShareRoleSchemas   *ShareRoleSchemas   `queryParam:"inline" name:"RolePayload"`
	PartnerRoleSchemas *PartnerRoleSchemas `queryParam:"inline" name:"RolePayload"`
	PortalRoleSchemas  *PortalRoleSchemas  `queryParam:"inline" name:"RolePayload"`

	Type RolePayloadType
}

func CreateRolePayloadUserRoleSchemas(userRoleSchemas UserRoleSchemas) RolePayload {
	typ := RolePayloadTypeUserRoleSchemas

	return RolePayload{
		UserRoleSchemas: &userRoleSchemas,
		Type:            typ,
	}
}

func CreateRolePayloadSchemas(schemas Schemas) RolePayload {
	typ := RolePayloadTypeSchemas

	return RolePayload{
		Schemas: &schemas,
		Type:    typ,
	}
}

func CreateRolePayloadShareRoleSchemas(shareRoleSchemas ShareRoleSchemas) RolePayload {
	typ := RolePayloadTypeShareRoleSchemas

	return RolePayload{
		ShareRoleSchemas: &shareRoleSchemas,
		Type:             typ,
	}
}

func CreateRolePayloadPartnerRoleSchemas(partnerRoleSchemas PartnerRoleSchemas) RolePayload {
	typ := RolePayloadTypePartnerRoleSchemas

	return RolePayload{
		PartnerRoleSchemas: &partnerRoleSchemas,
		Type:               typ,
	}
}

func CreateRolePayloadPortalRoleSchemas(portalRoleSchemas PortalRoleSchemas) RolePayload {
	typ := RolePayloadTypePortalRoleSchemas

	return RolePayload{
		PortalRoleSchemas: &portalRoleSchemas,
		Type:              typ,
	}
}

func (u *RolePayload) UnmarshalJSON(data []byte) error {

	var userRoleSchemas UserRoleSchemas = UserRoleSchemas{}
	if err := utils.UnmarshalJSON(data, &userRoleSchemas, "", true, nil); err == nil {
		u.UserRoleSchemas = &userRoleSchemas
		u.Type = RolePayloadTypeUserRoleSchemas
		return nil
	}

	var schemas Schemas = Schemas{}
	if err := utils.UnmarshalJSON(data, &schemas, "", true, nil); err == nil {
		u.Schemas = &schemas
		u.Type = RolePayloadTypeSchemas
		return nil
	}

	var shareRoleSchemas ShareRoleSchemas = ShareRoleSchemas{}
	if err := utils.UnmarshalJSON(data, &shareRoleSchemas, "", true, nil); err == nil {
		u.ShareRoleSchemas = &shareRoleSchemas
		u.Type = RolePayloadTypeShareRoleSchemas
		return nil
	}

	var partnerRoleSchemas PartnerRoleSchemas = PartnerRoleSchemas{}
	if err := utils.UnmarshalJSON(data, &partnerRoleSchemas, "", true, nil); err == nil {
		u.PartnerRoleSchemas = &partnerRoleSchemas
		u.Type = RolePayloadTypePartnerRoleSchemas
		return nil
	}

	var portalRoleSchemas PortalRoleSchemas = PortalRoleSchemas{}
	if err := utils.UnmarshalJSON(data, &portalRoleSchemas, "", true, nil); err == nil {
		u.PortalRoleSchemas = &portalRoleSchemas
		u.Type = RolePayloadTypePortalRoleSchemas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RolePayload", string(data))
}

func (u RolePayload) MarshalJSON() ([]byte, error) {
	if u.UserRoleSchemas != nil {
		return utils.MarshalJSON(u.UserRoleSchemas, "", true)
	}

	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.ShareRoleSchemas != nil {
		return utils.MarshalJSON(u.ShareRoleSchemas, "", true)
	}

	if u.PartnerRoleSchemas != nil {
		return utils.MarshalJSON(u.PartnerRoleSchemas, "", true)
	}

	if u.PortalRoleSchemas != nil {
		return utils.MarshalJSON(u.PortalRoleSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type RolePayload: all fields are null")
}
