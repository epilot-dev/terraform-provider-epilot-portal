// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-portal/internal/sdk/internal/utils"
)

type SchemasLabel struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasLabel) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasLabel) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type Button struct {
	Label *SchemasLabel `json:"label,omitempty"`
	URL   *string       `json:"url,omitempty"`
}

func (o *Button) GetLabel() *SchemasLabel {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *Button) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type SchemasHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasType string

const (
	SchemasTypeActionWidget       SchemasType = "ACTION_WIDGET"
	SchemasTypeContentWidget      SchemasType = "CONTENT_WIDGET"
	SchemasTypeEntityWidget       SchemasType = "ENTITY_WIDGET"
	SchemasTypeTeaserWidget       SchemasType = "TEASER_WIDGET"
	SchemasTypeDocumentWidget     SchemasType = "DOCUMENT_WIDGET"
	SchemasTypePaymentWidget      SchemasType = "PAYMENT_WIDGET"
	SchemasTypeMeterReadingWidget SchemasType = "METER_READING_WIDGET"
	SchemasTypeMeterChartWidget   SchemasType = "METER_CHART_WIDGET"
	SchemasTypeCampaignWidget     SchemasType = "CAMPAIGN_WIDGET"
)

func (e SchemasType) ToPointer() *SchemasType {
	return &e
}
func (e *SchemasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasType: %v", v)
	}
}

type CampaignWidgetSchemas struct {
	Button *Button `json:"button,omitempty"`
	// ID of the campaign
	CampaignID *string          `json:"campaign_id,omitempty"`
	Headline   *SchemasHeadline `json:"headline,omitempty"`
	ID         string           `json:"id"`
	ImageURL   *string          `json:"imageUrl,omitempty"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64               `json:"listIndex"`
	SubHeadline *SchemasSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasType         `json:"type"`
}

func (o *CampaignWidgetSchemas) GetButton() *Button {
	if o == nil {
		return nil
	}
	return o.Button
}

func (o *CampaignWidgetSchemas) GetCampaignID() *string {
	if o == nil {
		return nil
	}
	return o.CampaignID
}

func (o *CampaignWidgetSchemas) GetHeadline() *SchemasHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *CampaignWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CampaignWidgetSchemas) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *CampaignWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *CampaignWidgetSchemas) GetSubHeadline() *SchemasSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *CampaignWidgetSchemas) GetType() SchemasType {
	if o == nil {
		return SchemasType("")
	}
	return o.Type
}

type SchemasMeterChartWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasMeterChartWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasMeterChartWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasMeterChartWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasMeterChartWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasMeterChartWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasMeterChartWidgetType string

const (
	SchemasMeterChartWidgetTypeActionWidget       SchemasMeterChartWidgetType = "ACTION_WIDGET"
	SchemasMeterChartWidgetTypeContentWidget      SchemasMeterChartWidgetType = "CONTENT_WIDGET"
	SchemasMeterChartWidgetTypeEntityWidget       SchemasMeterChartWidgetType = "ENTITY_WIDGET"
	SchemasMeterChartWidgetTypeTeaserWidget       SchemasMeterChartWidgetType = "TEASER_WIDGET"
	SchemasMeterChartWidgetTypeDocumentWidget     SchemasMeterChartWidgetType = "DOCUMENT_WIDGET"
	SchemasMeterChartWidgetTypePaymentWidget      SchemasMeterChartWidgetType = "PAYMENT_WIDGET"
	SchemasMeterChartWidgetTypeMeterReadingWidget SchemasMeterChartWidgetType = "METER_READING_WIDGET"
	SchemasMeterChartWidgetTypeMeterChartWidget   SchemasMeterChartWidgetType = "METER_CHART_WIDGET"
	SchemasMeterChartWidgetTypeCampaignWidget     SchemasMeterChartWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasMeterChartWidgetType) ToPointer() *SchemasMeterChartWidgetType {
	return &e
}
func (e *SchemasMeterChartWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasMeterChartWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasMeterChartWidgetType: %v", v)
	}
}

type MeterChartWidgetSchemas struct {
	Headline *SchemasMeterChartWidgetHeadline `json:"headline,omitempty"`
	ID       string                           `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                               `json:"listIndex"`
	Schema      *string                             `json:"schema,omitempty"`
	SubHeadline *SchemasMeterChartWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasMeterChartWidgetType         `json:"type"`
}

func (o *MeterChartWidgetSchemas) GetHeadline() *SchemasMeterChartWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *MeterChartWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MeterChartWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *MeterChartWidgetSchemas) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *MeterChartWidgetSchemas) GetSubHeadline() *SchemasMeterChartWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *MeterChartWidgetSchemas) GetType() SchemasMeterChartWidgetType {
	if o == nil {
		return SchemasMeterChartWidgetType("")
	}
	return o.Type
}

type SchemasMeterReadingWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasMeterReadingWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasMeterReadingWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasMeterReadingWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasMeterReadingWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasMeterReadingWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasMeterReadingWidgetType string

const (
	SchemasMeterReadingWidgetTypeActionWidget       SchemasMeterReadingWidgetType = "ACTION_WIDGET"
	SchemasMeterReadingWidgetTypeContentWidget      SchemasMeterReadingWidgetType = "CONTENT_WIDGET"
	SchemasMeterReadingWidgetTypeEntityWidget       SchemasMeterReadingWidgetType = "ENTITY_WIDGET"
	SchemasMeterReadingWidgetTypeTeaserWidget       SchemasMeterReadingWidgetType = "TEASER_WIDGET"
	SchemasMeterReadingWidgetTypeDocumentWidget     SchemasMeterReadingWidgetType = "DOCUMENT_WIDGET"
	SchemasMeterReadingWidgetTypePaymentWidget      SchemasMeterReadingWidgetType = "PAYMENT_WIDGET"
	SchemasMeterReadingWidgetTypeMeterReadingWidget SchemasMeterReadingWidgetType = "METER_READING_WIDGET"
	SchemasMeterReadingWidgetTypeMeterChartWidget   SchemasMeterReadingWidgetType = "METER_CHART_WIDGET"
	SchemasMeterReadingWidgetTypeCampaignWidget     SchemasMeterReadingWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasMeterReadingWidgetType) ToPointer() *SchemasMeterReadingWidgetType {
	return &e
}
func (e *SchemasMeterReadingWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasMeterReadingWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasMeterReadingWidgetType: %v", v)
	}
}

type MeterReadingWidgetSchemas struct {
	Headline *SchemasMeterReadingWidgetHeadline `json:"headline,omitempty"`
	ID       string                             `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                                 `json:"listIndex"`
	Schema      *string                               `json:"schema,omitempty"`
	SubHeadline *SchemasMeterReadingWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasMeterReadingWidgetType         `json:"type"`
}

func (o *MeterReadingWidgetSchemas) GetHeadline() *SchemasMeterReadingWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *MeterReadingWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MeterReadingWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *MeterReadingWidgetSchemas) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *MeterReadingWidgetSchemas) GetSubHeadline() *SchemasMeterReadingWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *MeterReadingWidgetSchemas) GetType() SchemasMeterReadingWidgetType {
	if o == nil {
		return SchemasMeterReadingWidgetType("")
	}
	return o.Type
}

type SchemasPaymentWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasPaymentWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasPaymentWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasPaymentWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasPaymentWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasPaymentWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasPaymentWidgetType string

const (
	SchemasPaymentWidgetTypeActionWidget       SchemasPaymentWidgetType = "ACTION_WIDGET"
	SchemasPaymentWidgetTypeContentWidget      SchemasPaymentWidgetType = "CONTENT_WIDGET"
	SchemasPaymentWidgetTypeEntityWidget       SchemasPaymentWidgetType = "ENTITY_WIDGET"
	SchemasPaymentWidgetTypeTeaserWidget       SchemasPaymentWidgetType = "TEASER_WIDGET"
	SchemasPaymentWidgetTypeDocumentWidget     SchemasPaymentWidgetType = "DOCUMENT_WIDGET"
	SchemasPaymentWidgetTypePaymentWidget      SchemasPaymentWidgetType = "PAYMENT_WIDGET"
	SchemasPaymentWidgetTypeMeterReadingWidget SchemasPaymentWidgetType = "METER_READING_WIDGET"
	SchemasPaymentWidgetTypeMeterChartWidget   SchemasPaymentWidgetType = "METER_CHART_WIDGET"
	SchemasPaymentWidgetTypeCampaignWidget     SchemasPaymentWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasPaymentWidgetType) ToPointer() *SchemasPaymentWidgetType {
	return &e
}
func (e *SchemasPaymentWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasPaymentWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasPaymentWidgetType: %v", v)
	}
}

type PaymentWidgetSchemas struct {
	Headline *SchemasPaymentWidgetHeadline `json:"headline,omitempty"`
	ID       string                        `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                            `json:"listIndex"`
	SubHeadline *SchemasPaymentWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasPaymentWidgetType         `json:"type"`
}

func (o *PaymentWidgetSchemas) GetHeadline() *SchemasPaymentWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *PaymentWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PaymentWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *PaymentWidgetSchemas) GetSubHeadline() *SchemasPaymentWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *PaymentWidgetSchemas) GetType() SchemasPaymentWidgetType {
	if o == nil {
		return SchemasPaymentWidgetType("")
	}
	return o.Type
}

type SchemasDocumentWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasDocumentWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasDocumentWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasDocumentWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasDocumentWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasDocumentWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasDocumentWidgetType string

const (
	SchemasDocumentWidgetTypeActionWidget       SchemasDocumentWidgetType = "ACTION_WIDGET"
	SchemasDocumentWidgetTypeContentWidget      SchemasDocumentWidgetType = "CONTENT_WIDGET"
	SchemasDocumentWidgetTypeEntityWidget       SchemasDocumentWidgetType = "ENTITY_WIDGET"
	SchemasDocumentWidgetTypeTeaserWidget       SchemasDocumentWidgetType = "TEASER_WIDGET"
	SchemasDocumentWidgetTypeDocumentWidget     SchemasDocumentWidgetType = "DOCUMENT_WIDGET"
	SchemasDocumentWidgetTypePaymentWidget      SchemasDocumentWidgetType = "PAYMENT_WIDGET"
	SchemasDocumentWidgetTypeMeterReadingWidget SchemasDocumentWidgetType = "METER_READING_WIDGET"
	SchemasDocumentWidgetTypeMeterChartWidget   SchemasDocumentWidgetType = "METER_CHART_WIDGET"
	SchemasDocumentWidgetTypeCampaignWidget     SchemasDocumentWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasDocumentWidgetType) ToPointer() *SchemasDocumentWidgetType {
	return &e
}
func (e *SchemasDocumentWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasDocumentWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasDocumentWidgetType: %v", v)
	}
}

type DocumentWidgetSchemas struct {
	Headline *SchemasDocumentWidgetHeadline `json:"headline,omitempty"`
	ID       string                         `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                             `json:"listIndex"`
	SubHeadline *SchemasDocumentWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasDocumentWidgetType         `json:"type"`
}

func (o *DocumentWidgetSchemas) GetHeadline() *SchemasDocumentWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *DocumentWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DocumentWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *DocumentWidgetSchemas) GetSubHeadline() *SchemasDocumentWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *DocumentWidgetSchemas) GetType() SchemasDocumentWidgetType {
	if o == nil {
		return SchemasDocumentWidgetType("")
	}
	return o.Type
}

type SchemasTeaserWidgetLabel struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasTeaserWidgetLabel) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasTeaserWidgetLabel) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasButton struct {
	Label *SchemasTeaserWidgetLabel `json:"label,omitempty"`
	URL   *string                   `json:"url,omitempty"`
}

func (o *SchemasButton) GetLabel() *SchemasTeaserWidgetLabel {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *SchemasButton) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type SchemasTeaserWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasTeaserWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasTeaserWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasTeaserWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasTeaserWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasTeaserWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasTeaserWidgetType string

const (
	SchemasTeaserWidgetTypeActionWidget       SchemasTeaserWidgetType = "ACTION_WIDGET"
	SchemasTeaserWidgetTypeContentWidget      SchemasTeaserWidgetType = "CONTENT_WIDGET"
	SchemasTeaserWidgetTypeEntityWidget       SchemasTeaserWidgetType = "ENTITY_WIDGET"
	SchemasTeaserWidgetTypeTeaserWidget       SchemasTeaserWidgetType = "TEASER_WIDGET"
	SchemasTeaserWidgetTypeDocumentWidget     SchemasTeaserWidgetType = "DOCUMENT_WIDGET"
	SchemasTeaserWidgetTypePaymentWidget      SchemasTeaserWidgetType = "PAYMENT_WIDGET"
	SchemasTeaserWidgetTypeMeterReadingWidget SchemasTeaserWidgetType = "METER_READING_WIDGET"
	SchemasTeaserWidgetTypeMeterChartWidget   SchemasTeaserWidgetType = "METER_CHART_WIDGET"
	SchemasTeaserWidgetTypeCampaignWidget     SchemasTeaserWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasTeaserWidgetType) ToPointer() *SchemasTeaserWidgetType {
	return &e
}
func (e *SchemasTeaserWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasTeaserWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasTeaserWidgetType: %v", v)
	}
}

type TeaserWidgetSchemas struct {
	Button   *SchemasButton               `json:"button,omitempty"`
	Headline *SchemasTeaserWidgetHeadline `json:"headline,omitempty"`
	ID       string                       `json:"id"`
	ImageURL *string                      `json:"imageUrl,omitempty"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                           `json:"listIndex"`
	SubHeadline *SchemasTeaserWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasTeaserWidgetType         `json:"type"`
}

func (o *TeaserWidgetSchemas) GetButton() *SchemasButton {
	if o == nil {
		return nil
	}
	return o.Button
}

func (o *TeaserWidgetSchemas) GetHeadline() *SchemasTeaserWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *TeaserWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TeaserWidgetSchemas) GetImageURL() *string {
	if o == nil {
		return nil
	}
	return o.ImageURL
}

func (o *TeaserWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *TeaserWidgetSchemas) GetSubHeadline() *SchemasTeaserWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *TeaserWidgetSchemas) GetType() SchemasTeaserWidgetType {
	if o == nil {
		return SchemasTeaserWidgetType("")
	}
	return o.Type
}

type Headline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *Headline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *Headline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type Type string

const (
	TypeActionWidget       Type = "ACTION_WIDGET"
	TypeContentWidget      Type = "CONTENT_WIDGET"
	TypeEntityWidget       Type = "ENTITY_WIDGET"
	TypeTeaserWidget       Type = "TEASER_WIDGET"
	TypeDocumentWidget     Type = "DOCUMENT_WIDGET"
	TypePaymentWidget      Type = "PAYMENT_WIDGET"
	TypeMeterReadingWidget Type = "METER_READING_WIDGET"
	TypeMeterChartWidget   Type = "METER_CHART_WIDGET"
	TypeCampaignWidget     Type = "CAMPAIGN_WIDGET"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type Schemas struct {
	Actions  []WidgetAction `json:"actions,omitempty"`
	Headline *Headline      `json:"headline,omitempty"`
	ID       string         `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64        `json:"listIndex"`
	SubHeadline *SubHeadline `json:"subHeadline,omitempty"`
	Type        Type         `json:"type"`
}

func (o *Schemas) GetActions() []WidgetAction {
	if o == nil {
		return nil
	}
	return o.Actions
}

func (o *Schemas) GetHeadline() *Headline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *Schemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Schemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *Schemas) GetSubHeadline() *SubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *Schemas) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

type SchemasContentWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasContentWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasContentWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasContentWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasContentWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasContentWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasContentWidgetType string

const (
	SchemasContentWidgetTypeActionWidget       SchemasContentWidgetType = "ACTION_WIDGET"
	SchemasContentWidgetTypeContentWidget      SchemasContentWidgetType = "CONTENT_WIDGET"
	SchemasContentWidgetTypeEntityWidget       SchemasContentWidgetType = "ENTITY_WIDGET"
	SchemasContentWidgetTypeTeaserWidget       SchemasContentWidgetType = "TEASER_WIDGET"
	SchemasContentWidgetTypeDocumentWidget     SchemasContentWidgetType = "DOCUMENT_WIDGET"
	SchemasContentWidgetTypePaymentWidget      SchemasContentWidgetType = "PAYMENT_WIDGET"
	SchemasContentWidgetTypeMeterReadingWidget SchemasContentWidgetType = "METER_READING_WIDGET"
	SchemasContentWidgetTypeMeterChartWidget   SchemasContentWidgetType = "METER_CHART_WIDGET"
	SchemasContentWidgetTypeCampaignWidget     SchemasContentWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasContentWidgetType) ToPointer() *SchemasContentWidgetType {
	return &e
}
func (e *SchemasContentWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasContentWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasContentWidgetType: %v", v)
	}
}

type ContentWidgetSchemas struct {
	Content  *string                       `json:"content,omitempty"`
	Headline *SchemasContentWidgetHeadline `json:"headline,omitempty"`
	ID       string                        `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                            `json:"listIndex"`
	SubHeadline *SchemasContentWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasContentWidgetType         `json:"type"`
}

func (o *ContentWidgetSchemas) GetContent() *string {
	if o == nil {
		return nil
	}
	return o.Content
}

func (o *ContentWidgetSchemas) GetHeadline() *SchemasContentWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *ContentWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ContentWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *ContentWidgetSchemas) GetSubHeadline() *SchemasContentWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *ContentWidgetSchemas) GetType() SchemasContentWidgetType {
	if o == nil {
		return SchemasContentWidgetType("")
	}
	return o.Type
}

type SchemasEntityWidgetHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasEntityWidgetHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasEntityWidgetHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasEntityWidgetSubHeadline struct {
	De *string `json:"de,omitempty"`
	En *string `json:"en,omitempty"`
}

func (o *SchemasEntityWidgetSubHeadline) GetDe() *string {
	if o == nil {
		return nil
	}
	return o.De
}

func (o *SchemasEntityWidgetSubHeadline) GetEn() *string {
	if o == nil {
		return nil
	}
	return o.En
}

type SchemasEntityWidgetType string

const (
	SchemasEntityWidgetTypeActionWidget       SchemasEntityWidgetType = "ACTION_WIDGET"
	SchemasEntityWidgetTypeContentWidget      SchemasEntityWidgetType = "CONTENT_WIDGET"
	SchemasEntityWidgetTypeEntityWidget       SchemasEntityWidgetType = "ENTITY_WIDGET"
	SchemasEntityWidgetTypeTeaserWidget       SchemasEntityWidgetType = "TEASER_WIDGET"
	SchemasEntityWidgetTypeDocumentWidget     SchemasEntityWidgetType = "DOCUMENT_WIDGET"
	SchemasEntityWidgetTypePaymentWidget      SchemasEntityWidgetType = "PAYMENT_WIDGET"
	SchemasEntityWidgetTypeMeterReadingWidget SchemasEntityWidgetType = "METER_READING_WIDGET"
	SchemasEntityWidgetTypeMeterChartWidget   SchemasEntityWidgetType = "METER_CHART_WIDGET"
	SchemasEntityWidgetTypeCampaignWidget     SchemasEntityWidgetType = "CAMPAIGN_WIDGET"
)

func (e SchemasEntityWidgetType) ToPointer() *SchemasEntityWidgetType {
	return &e
}
func (e *SchemasEntityWidgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_WIDGET":
		fallthrough
	case "CONTENT_WIDGET":
		fallthrough
	case "ENTITY_WIDGET":
		fallthrough
	case "TEASER_WIDGET":
		fallthrough
	case "DOCUMENT_WIDGET":
		fallthrough
	case "PAYMENT_WIDGET":
		fallthrough
	case "METER_READING_WIDGET":
		fallthrough
	case "METER_CHART_WIDGET":
		fallthrough
	case "CAMPAIGN_WIDGET":
		*e = SchemasEntityWidgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemasEntityWidgetType: %v", v)
	}
}

type EntityWidgetSchemas struct {
	Headline *SchemasEntityWidgetHeadline `json:"headline,omitempty"`
	ID       string                       `json:"id"`
	// Index of the widget in the list, used for ordering (left or right)
	ListIndex   int64                           `json:"listIndex"`
	Schema      *string                         `json:"schema,omitempty"`
	SubHeadline *SchemasEntityWidgetSubHeadline `json:"subHeadline,omitempty"`
	Type        SchemasEntityWidgetType         `json:"type"`
}

func (o *EntityWidgetSchemas) GetHeadline() *SchemasEntityWidgetHeadline {
	if o == nil {
		return nil
	}
	return o.Headline
}

func (o *EntityWidgetSchemas) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EntityWidgetSchemas) GetListIndex() int64 {
	if o == nil {
		return 0
	}
	return o.ListIndex
}

func (o *EntityWidgetSchemas) GetSchema() *string {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *EntityWidgetSchemas) GetSubHeadline() *SchemasEntityWidgetSubHeadline {
	if o == nil {
		return nil
	}
	return o.SubHeadline
}

func (o *EntityWidgetSchemas) GetType() SchemasEntityWidgetType {
	if o == nil {
		return SchemasEntityWidgetType("")
	}
	return o.Type
}

type PortalWidgetType string

const (
	PortalWidgetTypeEntityWidgetSchemas       PortalWidgetType = "EntityWidget_Schemas"
	PortalWidgetTypeContentWidgetSchemas      PortalWidgetType = "ContentWidget_Schemas"
	PortalWidgetTypeSchemas                   PortalWidgetType = "Schemas"
	PortalWidgetTypeTeaserWidgetSchemas       PortalWidgetType = "TeaserWidget_Schemas"
	PortalWidgetTypeDocumentWidgetSchemas     PortalWidgetType = "DocumentWidget_Schemas"
	PortalWidgetTypePaymentWidgetSchemas      PortalWidgetType = "PaymentWidget_Schemas"
	PortalWidgetTypeMeterReadingWidgetSchemas PortalWidgetType = "MeterReadingWidget_Schemas"
	PortalWidgetTypeMeterChartWidgetSchemas   PortalWidgetType = "MeterChartWidget_Schemas"
	PortalWidgetTypeCampaignWidgetSchemas     PortalWidgetType = "CampaignWidget_Schemas"
)

type PortalWidget struct {
	EntityWidgetSchemas       *EntityWidgetSchemas       `queryParam:"inline"`
	ContentWidgetSchemas      *ContentWidgetSchemas      `queryParam:"inline"`
	Schemas                   *Schemas                   `queryParam:"inline"`
	TeaserWidgetSchemas       *TeaserWidgetSchemas       `queryParam:"inline"`
	DocumentWidgetSchemas     *DocumentWidgetSchemas     `queryParam:"inline"`
	PaymentWidgetSchemas      *PaymentWidgetSchemas      `queryParam:"inline"`
	MeterReadingWidgetSchemas *MeterReadingWidgetSchemas `queryParam:"inline"`
	MeterChartWidgetSchemas   *MeterChartWidgetSchemas   `queryParam:"inline"`
	CampaignWidgetSchemas     *CampaignWidgetSchemas     `queryParam:"inline"`

	Type PortalWidgetType
}

func CreatePortalWidgetEntityWidgetSchemas(entityWidgetSchemas EntityWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeEntityWidgetSchemas

	return PortalWidget{
		EntityWidgetSchemas: &entityWidgetSchemas,
		Type:                typ,
	}
}

func CreatePortalWidgetContentWidgetSchemas(contentWidgetSchemas ContentWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeContentWidgetSchemas

	return PortalWidget{
		ContentWidgetSchemas: &contentWidgetSchemas,
		Type:                 typ,
	}
}

func CreatePortalWidgetSchemas(schemas Schemas) PortalWidget {
	typ := PortalWidgetTypeSchemas

	return PortalWidget{
		Schemas: &schemas,
		Type:    typ,
	}
}

func CreatePortalWidgetTeaserWidgetSchemas(teaserWidgetSchemas TeaserWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeTeaserWidgetSchemas

	return PortalWidget{
		TeaserWidgetSchemas: &teaserWidgetSchemas,
		Type:                typ,
	}
}

func CreatePortalWidgetDocumentWidgetSchemas(documentWidgetSchemas DocumentWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeDocumentWidgetSchemas

	return PortalWidget{
		DocumentWidgetSchemas: &documentWidgetSchemas,
		Type:                  typ,
	}
}

func CreatePortalWidgetPaymentWidgetSchemas(paymentWidgetSchemas PaymentWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypePaymentWidgetSchemas

	return PortalWidget{
		PaymentWidgetSchemas: &paymentWidgetSchemas,
		Type:                 typ,
	}
}

func CreatePortalWidgetMeterReadingWidgetSchemas(meterReadingWidgetSchemas MeterReadingWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeMeterReadingWidgetSchemas

	return PortalWidget{
		MeterReadingWidgetSchemas: &meterReadingWidgetSchemas,
		Type:                      typ,
	}
}

func CreatePortalWidgetMeterChartWidgetSchemas(meterChartWidgetSchemas MeterChartWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeMeterChartWidgetSchemas

	return PortalWidget{
		MeterChartWidgetSchemas: &meterChartWidgetSchemas,
		Type:                    typ,
	}
}

func CreatePortalWidgetCampaignWidgetSchemas(campaignWidgetSchemas CampaignWidgetSchemas) PortalWidget {
	typ := PortalWidgetTypeCampaignWidgetSchemas

	return PortalWidget{
		CampaignWidgetSchemas: &campaignWidgetSchemas,
		Type:                  typ,
	}
}

func (u *PortalWidget) UnmarshalJSON(data []byte) error {

	var documentWidgetSchemas DocumentWidgetSchemas = DocumentWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &documentWidgetSchemas, "", true, true); err == nil {
		u.DocumentWidgetSchemas = &documentWidgetSchemas
		u.Type = PortalWidgetTypeDocumentWidgetSchemas
		return nil
	}

	var paymentWidgetSchemas PaymentWidgetSchemas = PaymentWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &paymentWidgetSchemas, "", true, true); err == nil {
		u.PaymentWidgetSchemas = &paymentWidgetSchemas
		u.Type = PortalWidgetTypePaymentWidgetSchemas
		return nil
	}

	var entityWidgetSchemas EntityWidgetSchemas = EntityWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &entityWidgetSchemas, "", true, true); err == nil {
		u.EntityWidgetSchemas = &entityWidgetSchemas
		u.Type = PortalWidgetTypeEntityWidgetSchemas
		return nil
	}

	var contentWidgetSchemas ContentWidgetSchemas = ContentWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &contentWidgetSchemas, "", true, true); err == nil {
		u.ContentWidgetSchemas = &contentWidgetSchemas
		u.Type = PortalWidgetTypeContentWidgetSchemas
		return nil
	}

	var schemas Schemas = Schemas{}
	if err := utils.UnmarshalJSON(data, &schemas, "", true, true); err == nil {
		u.Schemas = &schemas
		u.Type = PortalWidgetTypeSchemas
		return nil
	}

	var meterReadingWidgetSchemas MeterReadingWidgetSchemas = MeterReadingWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &meterReadingWidgetSchemas, "", true, true); err == nil {
		u.MeterReadingWidgetSchemas = &meterReadingWidgetSchemas
		u.Type = PortalWidgetTypeMeterReadingWidgetSchemas
		return nil
	}

	var meterChartWidgetSchemas MeterChartWidgetSchemas = MeterChartWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &meterChartWidgetSchemas, "", true, true); err == nil {
		u.MeterChartWidgetSchemas = &meterChartWidgetSchemas
		u.Type = PortalWidgetTypeMeterChartWidgetSchemas
		return nil
	}

	var teaserWidgetSchemas TeaserWidgetSchemas = TeaserWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &teaserWidgetSchemas, "", true, true); err == nil {
		u.TeaserWidgetSchemas = &teaserWidgetSchemas
		u.Type = PortalWidgetTypeTeaserWidgetSchemas
		return nil
	}

	var campaignWidgetSchemas CampaignWidgetSchemas = CampaignWidgetSchemas{}
	if err := utils.UnmarshalJSON(data, &campaignWidgetSchemas, "", true, true); err == nil {
		u.CampaignWidgetSchemas = &campaignWidgetSchemas
		u.Type = PortalWidgetTypeCampaignWidgetSchemas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PortalWidget", string(data))
}

func (u PortalWidget) MarshalJSON() ([]byte, error) {
	if u.EntityWidgetSchemas != nil {
		return utils.MarshalJSON(u.EntityWidgetSchemas, "", true)
	}

	if u.ContentWidgetSchemas != nil {
		return utils.MarshalJSON(u.ContentWidgetSchemas, "", true)
	}

	if u.Schemas != nil {
		return utils.MarshalJSON(u.Schemas, "", true)
	}

	if u.TeaserWidgetSchemas != nil {
		return utils.MarshalJSON(u.TeaserWidgetSchemas, "", true)
	}

	if u.DocumentWidgetSchemas != nil {
		return utils.MarshalJSON(u.DocumentWidgetSchemas, "", true)
	}

	if u.PaymentWidgetSchemas != nil {
		return utils.MarshalJSON(u.PaymentWidgetSchemas, "", true)
	}

	if u.MeterReadingWidgetSchemas != nil {
		return utils.MarshalJSON(u.MeterReadingWidgetSchemas, "", true)
	}

	if u.MeterChartWidgetSchemas != nil {
		return utils.MarshalJSON(u.MeterChartWidgetSchemas, "", true)
	}

	if u.CampaignWidgetSchemas != nil {
		return utils.MarshalJSON(u.CampaignWidgetSchemas, "", true)
	}

	return nil, errors.New("could not marshal union type PortalWidget: all fields are null")
}
